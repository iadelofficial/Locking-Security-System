
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002714  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d0  00800060  00002714  000027a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  00800130  00800130  00002878  2**0
                  ALLOC
  3 .stab         00002568  00000000  00000000  00002878  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011ca  00000000  00000000  00004de0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000060ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000625a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007ea3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008d8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00009b3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  00009f29  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a6f7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 45 11 	jmp	0x228a	; 0x228a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 33       	cpi	r26, 0x30	; 48
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e3       	ldi	r26, 0x30	; 48
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 33       	cpi	r26, 0x3D	; 61
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 88 13 	jmp	0x2710	; 0x2710 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e2       	ldi	r26, 0x21	; 33
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 0f 13 	jmp	0x261e	; 0x261e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 0f 13 	jmp	0x261e	; 0x261e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 03 13 	jmp	0x2606	; 0x2606 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	81 e2       	ldi	r24, 0x21	; 33
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 1f 13 	jmp	0x263e	; 0x263e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 0f 13 	jmp	0x261e	; 0x261e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 0f 13 	jmp	0x261e	; 0x261e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 0f 13 	jmp	0x261e	; 0x261e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 2b 13 	jmp	0x2656	; 0x2656 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 13 13 	jmp	0x2626	; 0x2626 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
uint8 g_tick=0;
uint8 openingMsgFlag=0;


int main (void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <main+0x6>
     b4c:	00 d0       	rcall	.+0      	; 0xb4e <main+0x8>
     b4e:	0f 92       	push	r0
     b50:	cd b7       	in	r28, 0x3d	; 61
     b52:	de b7       	in	r29, 0x3e	; 62
	uint8 val;

	LCD_init();  //Initialize LCD
     b54:	0e 94 81 0c 	call	0x1902	; 0x1902 <LCD_init>
	Uart_ConfigType Uart_Config = {ASYNCHRONOUS,DISABLED,ONE_BIT,_8_BIT}; //Configuration UART
     b58:	1a 82       	std	Y+2, r1	; 0x02
     b5a:	1b 82       	std	Y+3, r1	; 0x03
     b5c:	1c 82       	std	Y+4, r1	; 0x04
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8d 83       	std	Y+5, r24	; 0x05
	UART_init(&Uart_Config); //Initialize UART
     b62:	ce 01       	movw	r24, r28
     b64:	02 96       	adiw	r24, 0x02	; 2
     b66:	0e 94 18 12 	call	0x2430	; 0x2430 <UART_init>
	//Timer0_ConfigType Timer0_Config = {CTC,NORMAL_OC0_DISCONNECTED,F_CPU_64,CTC_INTERRUPT};
	//SREG |=(1<<7);
	//Timer0_init(&Timer0_Config);
	//Timer0_setCallBack(Door_Closing);

	UART_sendByte(FIRST_USE_CHEK);
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_sendByte>
	val = UART_recieveByte();
     b70:	0e 94 88 12 	call	0x2510	; 0x2510 <UART_recieveByte>
     b74:	89 83       	std	Y+1, r24	; 0x01



	if(val != USED_FIRST)
     b76:	89 81       	ldd	r24, Y+1	; 0x01
     b78:	85 30       	cpi	r24, 0x05	; 5
     b7a:	19 f0       	breq	.+6      	; 0xb82 <main+0x3c>
	{
		flag = 0;
     b7c:	10 92 30 01 	sts	0x0130, r1
     b80:	06 c0       	rjmp	.+12     	; 0xb8e <main+0x48>
	}
	else if(val == USED_FIRST)
     b82:	89 81       	ldd	r24, Y+1	; 0x01
     b84:	85 30       	cpi	r24, 0x05	; 5
     b86:	19 f4       	brne	.+6      	; 0xb8e <main+0x48>
	{
		flag = 1;
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	80 93 30 01 	sts	0x0130, r24
	}

	while(1)
	{
		if(flag == 0)
     b8e:	80 91 30 01 	lds	r24, 0x0130
     b92:	88 23       	and	r24, r24
     b94:	19 f4       	brne	.+6      	; 0xb9c <main+0x56>
		{
			SignUp();
     b96:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <SignUp>
     b9a:	f9 cf       	rjmp	.-14     	; 0xb8e <main+0x48>
		}

		else if(flag == 1)
     b9c:	80 91 30 01 	lds	r24, 0x0130
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	a9 f7       	brne	.-22     	; 0xb8e <main+0x48>
		{
			if(openingMsgFlag == 0)
     ba4:	80 91 32 01 	lds	r24, 0x0132
     ba8:	88 23       	and	r24, r24
     baa:	89 f7       	brne	.-30     	; 0xb8e <main+0x48>
			{
				SystemSetting();
     bac:	0e 94 2c 07 	call	0xe58	; 0xe58 <SystemSetting>
     bb0:	ee cf       	rjmp	.-36     	; 0xb8e <main+0x48>

00000bb2 <SignUp>:

/****************************************************************
 *                   Functions                                  *
 ****************************************************************/
void SignUp(void)
{
     bb2:	df 93       	push	r29
     bb4:	cf 93       	push	r28
     bb6:	cd b7       	in	r28, 0x3d	; 61
     bb8:	de b7       	in	r29, 0x3e	; 62
     bba:	a8 97       	sbiw	r28, 0x28	; 40
     bbc:	0f b6       	in	r0, 0x3f	; 63
     bbe:	f8 94       	cli
     bc0:	de bf       	out	0x3e, r29	; 62
     bc2:	0f be       	out	0x3f, r0	; 63
     bc4:	cd bf       	out	0x3d, r28	; 61
	uint8 firstPassword[6] = {0}, secondPassword[6] = {0};
     bc6:	86 e0       	ldi	r24, 0x06	; 6
     bc8:	fe 01       	movw	r30, r28
     bca:	7d 96       	adiw	r30, 0x1d	; 29
     bcc:	df 01       	movw	r26, r30
     bce:	98 2f       	mov	r25, r24
     bd0:	1d 92       	st	X+, r1
     bd2:	9a 95       	dec	r25
     bd4:	e9 f7       	brne	.-6      	; 0xbd0 <SignUp+0x1e>
     bd6:	86 e0       	ldi	r24, 0x06	; 6
     bd8:	fe 01       	movw	r30, r28
     bda:	b3 96       	adiw	r30, 0x23	; 35
     bdc:	df 01       	movw	r26, r30
     bde:	98 2f       	mov	r25, r24
     be0:	1d 92       	st	X+, r1
     be2:	9a 95       	dec	r25
     be4:	e9 f7       	brne	.-6      	; 0xbe0 <SignUp+0x2e>

	LCD_clearScreen();
     be6:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
	LCD_displayString("Please enter new");
     bea:	80 e6       	ldi	r24, 0x60	; 96
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
	LCD_goToRowColumn(1,0);
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	60 e0       	ldi	r22, 0x00	; 0
     bf6:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_goToRowColumn>
	LCD_displayString("password ");
     bfa:	81 e7       	ldi	r24, 0x71	; 113
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>

	EnterPassword(firstPassword);
     c02:	ce 01       	movw	r24, r28
     c04:	4d 96       	adiw	r24, 0x1d	; 29
     c06:	0e 94 bd 09 	call	0x137a	; 0x137a <EnterPassword>

	while(1)
	{
		LCD_clearScreen();
     c0a:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
		LCD_displayString("rewrite new Pass");
     c0e:	8b e7       	ldi	r24, 0x7B	; 123
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
		LCD_goToRowColumn(1,0);
     c16:	81 e0       	ldi	r24, 0x01	; 1
     c18:	60 e0       	ldi	r22, 0x00	; 0
     c1a:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_goToRowColumn>

		EnterPassword(secondPassword);
     c1e:	ce 01       	movw	r24, r28
     c20:	83 96       	adiw	r24, 0x23	; 35
     c22:	0e 94 bd 09 	call	0x137a	; 0x137a <EnterPassword>



		if(strcmp(firstPassword,secondPassword) == 0)
     c26:	ce 01       	movw	r24, r28
     c28:	4d 96       	adiw	r24, 0x1d	; 29
     c2a:	9e 01       	movw	r18, r28
     c2c:	2d 5d       	subi	r18, 0xDD	; 221
     c2e:	3f 4f       	sbci	r19, 0xFF	; 255
     c30:	b9 01       	movw	r22, r18
     c32:	0e 94 3a 13 	call	0x2674	; 0x2674 <strcmp>
     c36:	00 97       	sbiw	r24, 0x00	; 0
     c38:	09 f0       	breq	.+2      	; 0xc3c <SignUp+0x8a>
     c3a:	95 c0       	rjmp	.+298    	; 0xd66 <SignUp+0x1b4>
		{
			UART_sendByte(SET_FIRST_USE);
     c3c:	82 e0       	ldi	r24, 0x02	; 2
     c3e:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_sendByte>
			flag = 1;
     c42:	81 e0       	ldi	r24, 0x01	; 1
     c44:	80 93 30 01 	sts	0x0130, r24
			LCD_clearScreen();
     c48:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
			LCD_displayString("Done");
     c4c:	8c e8       	ldi	r24, 0x8C	; 140
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
     c54:	80 e0       	ldi	r24, 0x00	; 0
     c56:	90 e0       	ldi	r25, 0x00	; 0
     c58:	a8 e4       	ldi	r26, 0x48	; 72
     c5a:	b3 e4       	ldi	r27, 0x43	; 67
     c5c:	89 8f       	std	Y+25, r24	; 0x19
     c5e:	9a 8f       	std	Y+26, r25	; 0x1a
     c60:	ab 8f       	std	Y+27, r26	; 0x1b
     c62:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c64:	69 8d       	ldd	r22, Y+25	; 0x19
     c66:	7a 8d       	ldd	r23, Y+26	; 0x1a
     c68:	8b 8d       	ldd	r24, Y+27	; 0x1b
     c6a:	9c 8d       	ldd	r25, Y+28	; 0x1c
     c6c:	20 e0       	ldi	r18, 0x00	; 0
     c6e:	30 e0       	ldi	r19, 0x00	; 0
     c70:	4a e7       	ldi	r20, 0x7A	; 122
     c72:	53 e4       	ldi	r21, 0x43	; 67
     c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c78:	dc 01       	movw	r26, r24
     c7a:	cb 01       	movw	r24, r22
     c7c:	8d 8b       	std	Y+21, r24	; 0x15
     c7e:	9e 8b       	std	Y+22, r25	; 0x16
     c80:	af 8b       	std	Y+23, r26	; 0x17
     c82:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     c84:	6d 89       	ldd	r22, Y+21	; 0x15
     c86:	7e 89       	ldd	r23, Y+22	; 0x16
     c88:	8f 89       	ldd	r24, Y+23	; 0x17
     c8a:	98 8d       	ldd	r25, Y+24	; 0x18
     c8c:	20 e0       	ldi	r18, 0x00	; 0
     c8e:	30 e0       	ldi	r19, 0x00	; 0
     c90:	40 e8       	ldi	r20, 0x80	; 128
     c92:	5f e3       	ldi	r21, 0x3F	; 63
     c94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c98:	88 23       	and	r24, r24
     c9a:	2c f4       	brge	.+10     	; 0xca6 <SignUp+0xf4>
		__ticks = 1;
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	90 e0       	ldi	r25, 0x00	; 0
     ca0:	9c 8b       	std	Y+20, r25	; 0x14
     ca2:	8b 8b       	std	Y+19, r24	; 0x13
     ca4:	3f c0       	rjmp	.+126    	; 0xd24 <SignUp+0x172>
	else if (__tmp > 65535)
     ca6:	6d 89       	ldd	r22, Y+21	; 0x15
     ca8:	7e 89       	ldd	r23, Y+22	; 0x16
     caa:	8f 89       	ldd	r24, Y+23	; 0x17
     cac:	98 8d       	ldd	r25, Y+24	; 0x18
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	3f ef       	ldi	r19, 0xFF	; 255
     cb2:	4f e7       	ldi	r20, 0x7F	; 127
     cb4:	57 e4       	ldi	r21, 0x47	; 71
     cb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cba:	18 16       	cp	r1, r24
     cbc:	4c f5       	brge	.+82     	; 0xd10 <SignUp+0x15e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cbe:	69 8d       	ldd	r22, Y+25	; 0x19
     cc0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cc2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cc4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cc6:	20 e0       	ldi	r18, 0x00	; 0
     cc8:	30 e0       	ldi	r19, 0x00	; 0
     cca:	40 e2       	ldi	r20, 0x20	; 32
     ccc:	51 e4       	ldi	r21, 0x41	; 65
     cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cd2:	dc 01       	movw	r26, r24
     cd4:	cb 01       	movw	r24, r22
     cd6:	bc 01       	movw	r22, r24
     cd8:	cd 01       	movw	r24, r26
     cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cde:	dc 01       	movw	r26, r24
     ce0:	cb 01       	movw	r24, r22
     ce2:	9c 8b       	std	Y+20, r25	; 0x14
     ce4:	8b 8b       	std	Y+19, r24	; 0x13
     ce6:	0f c0       	rjmp	.+30     	; 0xd06 <SignUp+0x154>
     ce8:	89 e1       	ldi	r24, 0x19	; 25
     cea:	90 e0       	ldi	r25, 0x00	; 0
     cec:	9a 8b       	std	Y+18, r25	; 0x12
     cee:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cf0:	89 89       	ldd	r24, Y+17	; 0x11
     cf2:	9a 89       	ldd	r25, Y+18	; 0x12
     cf4:	01 97       	sbiw	r24, 0x01	; 1
     cf6:	f1 f7       	brne	.-4      	; 0xcf4 <SignUp+0x142>
     cf8:	9a 8b       	std	Y+18, r25	; 0x12
     cfa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cfc:	8b 89       	ldd	r24, Y+19	; 0x13
     cfe:	9c 89       	ldd	r25, Y+20	; 0x14
     d00:	01 97       	sbiw	r24, 0x01	; 1
     d02:	9c 8b       	std	Y+20, r25	; 0x14
     d04:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d06:	8b 89       	ldd	r24, Y+19	; 0x13
     d08:	9c 89       	ldd	r25, Y+20	; 0x14
     d0a:	00 97       	sbiw	r24, 0x00	; 0
     d0c:	69 f7       	brne	.-38     	; 0xce8 <SignUp+0x136>
     d0e:	14 c0       	rjmp	.+40     	; 0xd38 <SignUp+0x186>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d10:	6d 89       	ldd	r22, Y+21	; 0x15
     d12:	7e 89       	ldd	r23, Y+22	; 0x16
     d14:	8f 89       	ldd	r24, Y+23	; 0x17
     d16:	98 8d       	ldd	r25, Y+24	; 0x18
     d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	9c 8b       	std	Y+20, r25	; 0x14
     d22:	8b 8b       	std	Y+19, r24	; 0x13
     d24:	8b 89       	ldd	r24, Y+19	; 0x13
     d26:	9c 89       	ldd	r25, Y+20	; 0x14
     d28:	98 8b       	std	Y+16, r25	; 0x10
     d2a:	8f 87       	std	Y+15, r24	; 0x0f
     d2c:	8f 85       	ldd	r24, Y+15	; 0x0f
     d2e:	98 89       	ldd	r25, Y+16	; 0x10
     d30:	01 97       	sbiw	r24, 0x01	; 1
     d32:	f1 f7       	brne	.-4      	; 0xd30 <SignUp+0x17e>
     d34:	98 8b       	std	Y+16, r25	; 0x10
     d36:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			PrepareToSend(firstPassword,passwordMessage);
     d38:	ce 01       	movw	r24, r28
     d3a:	4d 96       	adiw	r24, 0x1d	; 29
     d3c:	27 e3       	ldi	r18, 0x37	; 55
     d3e:	31 e0       	ldi	r19, 0x01	; 1
     d40:	b9 01       	movw	r22, r18
     d42:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <PrepareToSend>
			UART_sendByte(SAVE_PASSWORD);
     d46:	8b e0       	ldi	r24, 0x0B	; 11
     d48:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_sendByte>
			UART_sendString(passwordMessage);
     d4c:	87 e3       	ldi	r24, 0x37	; 55
     d4e:	91 e0       	ldi	r25, 0x01	; 1
     d50:	0e 94 97 12 	call	0x252e	; 0x252e <UART_sendString>
			LCD_displayString("Invalid Match");

			_delay_ms(300);
		}
	}
}
     d54:	a8 96       	adiw	r28, 0x28	; 40
     d56:	0f b6       	in	r0, 0x3f	; 63
     d58:	f8 94       	cli
     d5a:	de bf       	out	0x3e, r29	; 62
     d5c:	0f be       	out	0x3f, r0	; 63
     d5e:	cd bf       	out	0x3d, r28	; 61
     d60:	cf 91       	pop	r28
     d62:	df 91       	pop	r29
     d64:	08 95       	ret
		}
		else
		{
			//flag=0;

			LCD_clearScreen();
     d66:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
			LCD_displayString("Invalid Match");
     d6a:	81 e9       	ldi	r24, 0x91	; 145
     d6c:	90 e0       	ldi	r25, 0x00	; 0
     d6e:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
     d72:	80 e0       	ldi	r24, 0x00	; 0
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	a6 e9       	ldi	r26, 0x96	; 150
     d78:	b3 e4       	ldi	r27, 0x43	; 67
     d7a:	8b 87       	std	Y+11, r24	; 0x0b
     d7c:	9c 87       	std	Y+12, r25	; 0x0c
     d7e:	ad 87       	std	Y+13, r26	; 0x0d
     d80:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d82:	6b 85       	ldd	r22, Y+11	; 0x0b
     d84:	7c 85       	ldd	r23, Y+12	; 0x0c
     d86:	8d 85       	ldd	r24, Y+13	; 0x0d
     d88:	9e 85       	ldd	r25, Y+14	; 0x0e
     d8a:	20 e0       	ldi	r18, 0x00	; 0
     d8c:	30 e0       	ldi	r19, 0x00	; 0
     d8e:	4a e7       	ldi	r20, 0x7A	; 122
     d90:	53 e4       	ldi	r21, 0x43	; 67
     d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d96:	dc 01       	movw	r26, r24
     d98:	cb 01       	movw	r24, r22
     d9a:	8f 83       	std	Y+7, r24	; 0x07
     d9c:	98 87       	std	Y+8, r25	; 0x08
     d9e:	a9 87       	std	Y+9, r26	; 0x09
     da0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     da2:	6f 81       	ldd	r22, Y+7	; 0x07
     da4:	78 85       	ldd	r23, Y+8	; 0x08
     da6:	89 85       	ldd	r24, Y+9	; 0x09
     da8:	9a 85       	ldd	r25, Y+10	; 0x0a
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	40 e8       	ldi	r20, 0x80	; 128
     db0:	5f e3       	ldi	r21, 0x3F	; 63
     db2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     db6:	88 23       	and	r24, r24
     db8:	2c f4       	brge	.+10     	; 0xdc4 <SignUp+0x212>
		__ticks = 1;
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	9e 83       	std	Y+6, r25	; 0x06
     dc0:	8d 83       	std	Y+5, r24	; 0x05
     dc2:	3f c0       	rjmp	.+126    	; 0xe42 <SignUp+0x290>
	else if (__tmp > 65535)
     dc4:	6f 81       	ldd	r22, Y+7	; 0x07
     dc6:	78 85       	ldd	r23, Y+8	; 0x08
     dc8:	89 85       	ldd	r24, Y+9	; 0x09
     dca:	9a 85       	ldd	r25, Y+10	; 0x0a
     dcc:	20 e0       	ldi	r18, 0x00	; 0
     dce:	3f ef       	ldi	r19, 0xFF	; 255
     dd0:	4f e7       	ldi	r20, 0x7F	; 127
     dd2:	57 e4       	ldi	r21, 0x47	; 71
     dd4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dd8:	18 16       	cp	r1, r24
     dda:	4c f5       	brge	.+82     	; 0xe2e <SignUp+0x27c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ddc:	6b 85       	ldd	r22, Y+11	; 0x0b
     dde:	7c 85       	ldd	r23, Y+12	; 0x0c
     de0:	8d 85       	ldd	r24, Y+13	; 0x0d
     de2:	9e 85       	ldd	r25, Y+14	; 0x0e
     de4:	20 e0       	ldi	r18, 0x00	; 0
     de6:	30 e0       	ldi	r19, 0x00	; 0
     de8:	40 e2       	ldi	r20, 0x20	; 32
     dea:	51 e4       	ldi	r21, 0x41	; 65
     dec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df0:	dc 01       	movw	r26, r24
     df2:	cb 01       	movw	r24, r22
     df4:	bc 01       	movw	r22, r24
     df6:	cd 01       	movw	r24, r26
     df8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	0f c0       	rjmp	.+30     	; 0xe24 <SignUp+0x272>
     e06:	89 e1       	ldi	r24, 0x19	; 25
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	9c 83       	std	Y+4, r25	; 0x04
     e0c:	8b 83       	std	Y+3, r24	; 0x03
     e0e:	8b 81       	ldd	r24, Y+3	; 0x03
     e10:	9c 81       	ldd	r25, Y+4	; 0x04
     e12:	01 97       	sbiw	r24, 0x01	; 1
     e14:	f1 f7       	brne	.-4      	; 0xe12 <SignUp+0x260>
     e16:	9c 83       	std	Y+4, r25	; 0x04
     e18:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e1a:	8d 81       	ldd	r24, Y+5	; 0x05
     e1c:	9e 81       	ldd	r25, Y+6	; 0x06
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	9e 83       	std	Y+6, r25	; 0x06
     e22:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e24:	8d 81       	ldd	r24, Y+5	; 0x05
     e26:	9e 81       	ldd	r25, Y+6	; 0x06
     e28:	00 97       	sbiw	r24, 0x00	; 0
     e2a:	69 f7       	brne	.-38     	; 0xe06 <SignUp+0x254>
     e2c:	ee ce       	rjmp	.-548    	; 0xc0a <SignUp+0x58>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e2e:	6f 81       	ldd	r22, Y+7	; 0x07
     e30:	78 85       	ldd	r23, Y+8	; 0x08
     e32:	89 85       	ldd	r24, Y+9	; 0x09
     e34:	9a 85       	ldd	r25, Y+10	; 0x0a
     e36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e3a:	dc 01       	movw	r26, r24
     e3c:	cb 01       	movw	r24, r22
     e3e:	9e 83       	std	Y+6, r25	; 0x06
     e40:	8d 83       	std	Y+5, r24	; 0x05
     e42:	8d 81       	ldd	r24, Y+5	; 0x05
     e44:	9e 81       	ldd	r25, Y+6	; 0x06
     e46:	9a 83       	std	Y+2, r25	; 0x02
     e48:	89 83       	std	Y+1, r24	; 0x01
     e4a:	89 81       	ldd	r24, Y+1	; 0x01
     e4c:	9a 81       	ldd	r25, Y+2	; 0x02
     e4e:	01 97       	sbiw	r24, 0x01	; 1
     e50:	f1 f7       	brne	.-4      	; 0xe4e <SignUp+0x29c>
     e52:	9a 83       	std	Y+2, r25	; 0x02
     e54:	89 83       	std	Y+1, r24	; 0x01
     e56:	d9 ce       	rjmp	.-590    	; 0xc0a <SignUp+0x58>

00000e58 <SystemSetting>:
	}
}
/***********************************************************************************************/

void SystemSetting(void)
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	cd 54       	subi	r28, 0x4D	; 77
     e62:	d0 40       	sbci	r29, 0x00	; 0
     e64:	0f b6       	in	r0, 0x3f	; 63
     e66:	f8 94       	cli
     e68:	de bf       	out	0x3e, r29	; 62
     e6a:	0f be       	out	0x3f, r0	; 63
     e6c:	cd bf       	out	0x3d, r28	; 61
	uint8 MyPassword[6];
	uint8 OldPassword[6];
	uint8 count = 0;
     e6e:	1b ae       	std	Y+59, r1	; 0x3b

	LCD_clearScreen();
     e70:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
	LCD_displayString("+:ChangePassword");
     e74:	8f e9       	ldi	r24, 0x9F	; 159
     e76:	90 e0       	ldi	r25, 0x00	; 0
     e78:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
	LCD_goToRowColumn(1,0);
     e7c:	81 e0       	ldi	r24, 0x01	; 1
     e7e:	60 e0       	ldi	r22, 0x00	; 0
     e80:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_goToRowColumn>
	LCD_displayString("-: Open The Door");
     e84:	80 eb       	ldi	r24, 0xB0	; 176
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	aa ef       	ldi	r26, 0xFA	; 250
     e92:	b3 e4       	ldi	r27, 0x43	; 67
     e94:	8d ab       	std	Y+53, r24	; 0x35
     e96:	9e ab       	std	Y+54, r25	; 0x36
     e98:	af ab       	std	Y+55, r26	; 0x37
     e9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e9c:	6d a9       	ldd	r22, Y+53	; 0x35
     e9e:	7e a9       	ldd	r23, Y+54	; 0x36
     ea0:	8f a9       	ldd	r24, Y+55	; 0x37
     ea2:	98 ad       	ldd	r25, Y+56	; 0x38
     ea4:	20 e0       	ldi	r18, 0x00	; 0
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	4a e7       	ldi	r20, 0x7A	; 122
     eaa:	53 e4       	ldi	r21, 0x43	; 67
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	89 ab       	std	Y+49, r24	; 0x31
     eb6:	9a ab       	std	Y+50, r25	; 0x32
     eb8:	ab ab       	std	Y+51, r26	; 0x33
     eba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ebc:	69 a9       	ldd	r22, Y+49	; 0x31
     ebe:	7a a9       	ldd	r23, Y+50	; 0x32
     ec0:	8b a9       	ldd	r24, Y+51	; 0x33
     ec2:	9c a9       	ldd	r25, Y+52	; 0x34
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	2c f4       	brge	.+10     	; 0xede <SystemSetting+0x86>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	98 ab       	std	Y+48, r25	; 0x30
     eda:	8f a7       	std	Y+47, r24	; 0x2f
     edc:	3f c0       	rjmp	.+126    	; 0xf5c <SystemSetting+0x104>
	else if (__tmp > 65535)
     ede:	69 a9       	ldd	r22, Y+49	; 0x31
     ee0:	7a a9       	ldd	r23, Y+50	; 0x32
     ee2:	8b a9       	ldd	r24, Y+51	; 0x33
     ee4:	9c a9       	ldd	r25, Y+52	; 0x34
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	3f ef       	ldi	r19, 0xFF	; 255
     eea:	4f e7       	ldi	r20, 0x7F	; 127
     eec:	57 e4       	ldi	r21, 0x47	; 71
     eee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ef2:	18 16       	cp	r1, r24
     ef4:	4c f5       	brge	.+82     	; 0xf48 <SystemSetting+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ef6:	6d a9       	ldd	r22, Y+53	; 0x35
     ef8:	7e a9       	ldd	r23, Y+54	; 0x36
     efa:	8f a9       	ldd	r24, Y+55	; 0x37
     efc:	98 ad       	ldd	r25, Y+56	; 0x38
     efe:	20 e0       	ldi	r18, 0x00	; 0
     f00:	30 e0       	ldi	r19, 0x00	; 0
     f02:	40 e2       	ldi	r20, 0x20	; 32
     f04:	51 e4       	ldi	r21, 0x41	; 65
     f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f0a:	dc 01       	movw	r26, r24
     f0c:	cb 01       	movw	r24, r22
     f0e:	bc 01       	movw	r22, r24
     f10:	cd 01       	movw	r24, r26
     f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	98 ab       	std	Y+48, r25	; 0x30
     f1c:	8f a7       	std	Y+47, r24	; 0x2f
     f1e:	0f c0       	rjmp	.+30     	; 0xf3e <SystemSetting+0xe6>
     f20:	89 e1       	ldi	r24, 0x19	; 25
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	9e a7       	std	Y+46, r25	; 0x2e
     f26:	8d a7       	std	Y+45, r24	; 0x2d
     f28:	8d a5       	ldd	r24, Y+45	; 0x2d
     f2a:	9e a5       	ldd	r25, Y+46	; 0x2e
     f2c:	01 97       	sbiw	r24, 0x01	; 1
     f2e:	f1 f7       	brne	.-4      	; 0xf2c <SystemSetting+0xd4>
     f30:	9e a7       	std	Y+46, r25	; 0x2e
     f32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f34:	8f a5       	ldd	r24, Y+47	; 0x2f
     f36:	98 a9       	ldd	r25, Y+48	; 0x30
     f38:	01 97       	sbiw	r24, 0x01	; 1
     f3a:	98 ab       	std	Y+48, r25	; 0x30
     f3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f3e:	8f a5       	ldd	r24, Y+47	; 0x2f
     f40:	98 a9       	ldd	r25, Y+48	; 0x30
     f42:	00 97       	sbiw	r24, 0x00	; 0
     f44:	69 f7       	brne	.-38     	; 0xf20 <SystemSetting+0xc8>
     f46:	14 c0       	rjmp	.+40     	; 0xf70 <SystemSetting+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f48:	69 a9       	ldd	r22, Y+49	; 0x31
     f4a:	7a a9       	ldd	r23, Y+50	; 0x32
     f4c:	8b a9       	ldd	r24, Y+51	; 0x33
     f4e:	9c a9       	ldd	r25, Y+52	; 0x34
     f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	98 ab       	std	Y+48, r25	; 0x30
     f5a:	8f a7       	std	Y+47, r24	; 0x2f
     f5c:	8f a5       	ldd	r24, Y+47	; 0x2f
     f5e:	98 a9       	ldd	r25, Y+48	; 0x30
     f60:	9c a7       	std	Y+44, r25	; 0x2c
     f62:	8b a7       	std	Y+43, r24	; 0x2b
     f64:	8b a5       	ldd	r24, Y+43	; 0x2b
     f66:	9c a5       	ldd	r25, Y+44	; 0x2c
     f68:	01 97       	sbiw	r24, 0x01	; 1
     f6a:	f1 f7       	brne	.-4      	; 0xf68 <SystemSetting+0x110>
     f6c:	9c a7       	std	Y+44, r25	; 0x2c
     f6e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(500);

	// Change Password
	if(KeyPad_getPressedKey() == '+')
     f70:	0e 94 0b 0b 	call	0x1616	; 0x1616 <KeyPad_getPressedKey>
     f74:	8b 32       	cpi	r24, 0x2B	; 43
     f76:	09 f0       	breq	.+2      	; 0xf7a <SystemSetting+0x122>
     f78:	31 c1       	rjmp	.+610    	; 0x11dc <SystemSetting+0x384>
	{
		uint8 CurrentPass[6];
		UART_sendByte(CHANGE_PASSWORD);
     f7a:	8c e0       	ldi	r24, 0x0C	; 12
     f7c:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_sendByte>

		UART_sendByte(M1_READY); // MC1 is ready
     f80:	81 e0       	ldi	r24, 0x01	; 1
     f82:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_sendByte>

		UART_receiveString(OldPassword);
     f86:	ce 01       	movw	r24, r28
     f88:	8e 5b       	subi	r24, 0xBE	; 190
     f8a:	9f 4f       	sbci	r25, 0xFF	; 255
     f8c:	0e 94 c0 12 	call	0x2580	; 0x2580 <UART_receiveString>

		while(1)
		{
			LCD_clearScreen();
     f90:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
			LCD_displayString("Enter Old Pass");
     f94:	81 ec       	ldi	r24, 0xC1	; 193
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
			LCD_goToRowColumn(1,0);
     f9c:	81 e0       	ldi	r24, 0x01	; 1
     f9e:	60 e0       	ldi	r22, 0x00	; 0
     fa0:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_goToRowColumn>

			EnterPassword(CurrentPass);
     fa4:	ce 01       	movw	r24, r28
     fa6:	88 5b       	subi	r24, 0xB8	; 184
     fa8:	9f 4f       	sbci	r25, 0xFF	; 255
     faa:	0e 94 bd 09 	call	0x137a	; 0x137a <EnterPassword>

			if(count == 2)
     fae:	8b ad       	ldd	r24, Y+59	; 0x3b
     fb0:	82 30       	cpi	r24, 0x02	; 2
     fb2:	81 f4       	brne	.+32     	; 0xfd4 <SystemSetting+0x17c>
			{
				LCD_clearScreen();
     fb4:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
				LCD_displayString("tried 3 times");
     fb8:	80 ed       	ldi	r24, 0xD0	; 208
     fba:	90 e0       	ldi	r25, 0x00	; 0
     fbc:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
				UART_sendByte(WRONG_PASSWORD);
     fc0:	8f e0       	ldi	r24, 0x0F	; 15
     fc2:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_sendByte>

				uint8 buzzerOff = UART_recieveByte();
     fc6:	0e 94 88 12 	call	0x2510	; 0x2510 <UART_recieveByte>
     fca:	8a af       	std	Y+58, r24	; 0x3a
				if(buzzerOff == BUZZER_OFF)
     fcc:	8a ad       	ldd	r24, Y+58	; 0x3a
     fce:	83 30       	cpi	r24, 0x03	; 3
     fd0:	09 f4       	brne	.+2      	; 0xfd4 <SystemSetting+0x17c>
     fd2:	c9 c1       	rjmp	.+914    	; 0x1366 <SystemSetting+0x50e>
					break;
			}


			if((strcmp(OldPassword,CurrentPass)) == 0)
     fd4:	ce 01       	movw	r24, r28
     fd6:	8e 5b       	subi	r24, 0xBE	; 190
     fd8:	9f 4f       	sbci	r25, 0xFF	; 255
     fda:	9e 01       	movw	r18, r28
     fdc:	28 5b       	subi	r18, 0xB8	; 184
     fde:	3f 4f       	sbci	r19, 0xFF	; 255
     fe0:	b9 01       	movw	r22, r18
     fe2:	0e 94 3a 13 	call	0x2674	; 0x2674 <strcmp>
     fe6:	00 97       	sbiw	r24, 0x00	; 0
     fe8:	09 f0       	breq	.+2      	; 0xfec <SystemSetting+0x194>
     fea:	7c c0       	rjmp	.+248    	; 0x10e4 <SystemSetting+0x28c>
			{
				count = 0;
     fec:	1b ae       	std	Y+59, r1	; 0x3b
				LCD_clearScreen();
     fee:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
				LCD_displayString("SUCCESS");
     ff2:	8e ed       	ldi	r24, 0xDE	; 222
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
     ffa:	80 e0       	ldi	r24, 0x00	; 0
     ffc:	90 e0       	ldi	r25, 0x00	; 0
     ffe:	a8 e4       	ldi	r26, 0x48	; 72
    1000:	b3 e4       	ldi	r27, 0x43	; 67
    1002:	8f a3       	std	Y+39, r24	; 0x27
    1004:	98 a7       	std	Y+40, r25	; 0x28
    1006:	a9 a7       	std	Y+41, r26	; 0x29
    1008:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    100a:	6f a1       	ldd	r22, Y+39	; 0x27
    100c:	78 a5       	ldd	r23, Y+40	; 0x28
    100e:	89 a5       	ldd	r24, Y+41	; 0x29
    1010:	9a a5       	ldd	r25, Y+42	; 0x2a
    1012:	20 e0       	ldi	r18, 0x00	; 0
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	4a e7       	ldi	r20, 0x7A	; 122
    1018:	53 e4       	ldi	r21, 0x43	; 67
    101a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    101e:	dc 01       	movw	r26, r24
    1020:	cb 01       	movw	r24, r22
    1022:	8b a3       	std	Y+35, r24	; 0x23
    1024:	9c a3       	std	Y+36, r25	; 0x24
    1026:	ad a3       	std	Y+37, r26	; 0x25
    1028:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    102a:	6b a1       	ldd	r22, Y+35	; 0x23
    102c:	7c a1       	ldd	r23, Y+36	; 0x24
    102e:	8d a1       	ldd	r24, Y+37	; 0x25
    1030:	9e a1       	ldd	r25, Y+38	; 0x26
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	30 e0       	ldi	r19, 0x00	; 0
    1036:	40 e8       	ldi	r20, 0x80	; 128
    1038:	5f e3       	ldi	r21, 0x3F	; 63
    103a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    103e:	88 23       	and	r24, r24
    1040:	2c f4       	brge	.+10     	; 0x104c <SystemSetting+0x1f4>
		__ticks = 1;
    1042:	81 e0       	ldi	r24, 0x01	; 1
    1044:	90 e0       	ldi	r25, 0x00	; 0
    1046:	9a a3       	std	Y+34, r25	; 0x22
    1048:	89 a3       	std	Y+33, r24	; 0x21
    104a:	3f c0       	rjmp	.+126    	; 0x10ca <SystemSetting+0x272>
	else if (__tmp > 65535)
    104c:	6b a1       	ldd	r22, Y+35	; 0x23
    104e:	7c a1       	ldd	r23, Y+36	; 0x24
    1050:	8d a1       	ldd	r24, Y+37	; 0x25
    1052:	9e a1       	ldd	r25, Y+38	; 0x26
    1054:	20 e0       	ldi	r18, 0x00	; 0
    1056:	3f ef       	ldi	r19, 0xFF	; 255
    1058:	4f e7       	ldi	r20, 0x7F	; 127
    105a:	57 e4       	ldi	r21, 0x47	; 71
    105c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1060:	18 16       	cp	r1, r24
    1062:	4c f5       	brge	.+82     	; 0x10b6 <SystemSetting+0x25e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1064:	6f a1       	ldd	r22, Y+39	; 0x27
    1066:	78 a5       	ldd	r23, Y+40	; 0x28
    1068:	89 a5       	ldd	r24, Y+41	; 0x29
    106a:	9a a5       	ldd	r25, Y+42	; 0x2a
    106c:	20 e0       	ldi	r18, 0x00	; 0
    106e:	30 e0       	ldi	r19, 0x00	; 0
    1070:	40 e2       	ldi	r20, 0x20	; 32
    1072:	51 e4       	ldi	r21, 0x41	; 65
    1074:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	bc 01       	movw	r22, r24
    107e:	cd 01       	movw	r24, r26
    1080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1084:	dc 01       	movw	r26, r24
    1086:	cb 01       	movw	r24, r22
    1088:	9a a3       	std	Y+34, r25	; 0x22
    108a:	89 a3       	std	Y+33, r24	; 0x21
    108c:	0f c0       	rjmp	.+30     	; 0x10ac <SystemSetting+0x254>
    108e:	89 e1       	ldi	r24, 0x19	; 25
    1090:	90 e0       	ldi	r25, 0x00	; 0
    1092:	98 a3       	std	Y+32, r25	; 0x20
    1094:	8f 8f       	std	Y+31, r24	; 0x1f
    1096:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1098:	98 a1       	ldd	r25, Y+32	; 0x20
    109a:	01 97       	sbiw	r24, 0x01	; 1
    109c:	f1 f7       	brne	.-4      	; 0x109a <SystemSetting+0x242>
    109e:	98 a3       	std	Y+32, r25	; 0x20
    10a0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10a2:	89 a1       	ldd	r24, Y+33	; 0x21
    10a4:	9a a1       	ldd	r25, Y+34	; 0x22
    10a6:	01 97       	sbiw	r24, 0x01	; 1
    10a8:	9a a3       	std	Y+34, r25	; 0x22
    10aa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10ac:	89 a1       	ldd	r24, Y+33	; 0x21
    10ae:	9a a1       	ldd	r25, Y+34	; 0x22
    10b0:	00 97       	sbiw	r24, 0x00	; 0
    10b2:	69 f7       	brne	.-38     	; 0x108e <SystemSetting+0x236>
    10b4:	14 c0       	rjmp	.+40     	; 0x10de <SystemSetting+0x286>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10b6:	6b a1       	ldd	r22, Y+35	; 0x23
    10b8:	7c a1       	ldd	r23, Y+36	; 0x24
    10ba:	8d a1       	ldd	r24, Y+37	; 0x25
    10bc:	9e a1       	ldd	r25, Y+38	; 0x26
    10be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10c2:	dc 01       	movw	r26, r24
    10c4:	cb 01       	movw	r24, r22
    10c6:	9a a3       	std	Y+34, r25	; 0x22
    10c8:	89 a3       	std	Y+33, r24	; 0x21
    10ca:	89 a1       	ldd	r24, Y+33	; 0x21
    10cc:	9a a1       	ldd	r25, Y+34	; 0x22
    10ce:	9e 8f       	std	Y+30, r25	; 0x1e
    10d0:	8d 8f       	std	Y+29, r24	; 0x1d
    10d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    10d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	f1 f7       	brne	.-4      	; 0x10d6 <SystemSetting+0x27e>
    10da:	9e 8f       	std	Y+30, r25	; 0x1e
    10dc:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(200);

				SignUp();
    10de:	0e 94 d9 05 	call	0xbb2	; 0xbb2 <SignUp>
    10e2:	41 c1       	rjmp	.+642    	; 0x1366 <SystemSetting+0x50e>

				break;
			}
			count++;
    10e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	8b af       	std	Y+59, r24	; 0x3b
			LCD_clearScreen();
    10ea:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
			LCD_displayString("Invalid Match");
    10ee:	81 e9       	ldi	r24, 0x91	; 145
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	a8 e4       	ldi	r26, 0x48	; 72
    10fc:	b3 e4       	ldi	r27, 0x43	; 67
    10fe:	89 8f       	std	Y+25, r24	; 0x19
    1100:	9a 8f       	std	Y+26, r25	; 0x1a
    1102:	ab 8f       	std	Y+27, r26	; 0x1b
    1104:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1106:	69 8d       	ldd	r22, Y+25	; 0x19
    1108:	7a 8d       	ldd	r23, Y+26	; 0x1a
    110a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    110c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    110e:	20 e0       	ldi	r18, 0x00	; 0
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	4a e7       	ldi	r20, 0x7A	; 122
    1114:	53 e4       	ldi	r21, 0x43	; 67
    1116:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	8d 8b       	std	Y+21, r24	; 0x15
    1120:	9e 8b       	std	Y+22, r25	; 0x16
    1122:	af 8b       	std	Y+23, r26	; 0x17
    1124:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1126:	6d 89       	ldd	r22, Y+21	; 0x15
    1128:	7e 89       	ldd	r23, Y+22	; 0x16
    112a:	8f 89       	ldd	r24, Y+23	; 0x17
    112c:	98 8d       	ldd	r25, Y+24	; 0x18
    112e:	20 e0       	ldi	r18, 0x00	; 0
    1130:	30 e0       	ldi	r19, 0x00	; 0
    1132:	40 e8       	ldi	r20, 0x80	; 128
    1134:	5f e3       	ldi	r21, 0x3F	; 63
    1136:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    113a:	88 23       	and	r24, r24
    113c:	2c f4       	brge	.+10     	; 0x1148 <SystemSetting+0x2f0>
		__ticks = 1;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	9c 8b       	std	Y+20, r25	; 0x14
    1144:	8b 8b       	std	Y+19, r24	; 0x13
    1146:	3f c0       	rjmp	.+126    	; 0x11c6 <SystemSetting+0x36e>
	else if (__tmp > 65535)
    1148:	6d 89       	ldd	r22, Y+21	; 0x15
    114a:	7e 89       	ldd	r23, Y+22	; 0x16
    114c:	8f 89       	ldd	r24, Y+23	; 0x17
    114e:	98 8d       	ldd	r25, Y+24	; 0x18
    1150:	20 e0       	ldi	r18, 0x00	; 0
    1152:	3f ef       	ldi	r19, 0xFF	; 255
    1154:	4f e7       	ldi	r20, 0x7F	; 127
    1156:	57 e4       	ldi	r21, 0x47	; 71
    1158:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    115c:	18 16       	cp	r1, r24
    115e:	4c f5       	brge	.+82     	; 0x11b2 <SystemSetting+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1160:	69 8d       	ldd	r22, Y+25	; 0x19
    1162:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1164:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1166:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1168:	20 e0       	ldi	r18, 0x00	; 0
    116a:	30 e0       	ldi	r19, 0x00	; 0
    116c:	40 e2       	ldi	r20, 0x20	; 32
    116e:	51 e4       	ldi	r21, 0x41	; 65
    1170:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1174:	dc 01       	movw	r26, r24
    1176:	cb 01       	movw	r24, r22
    1178:	bc 01       	movw	r22, r24
    117a:	cd 01       	movw	r24, r26
    117c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	9c 8b       	std	Y+20, r25	; 0x14
    1186:	8b 8b       	std	Y+19, r24	; 0x13
    1188:	0f c0       	rjmp	.+30     	; 0x11a8 <SystemSetting+0x350>
    118a:	89 e1       	ldi	r24, 0x19	; 25
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	9a 8b       	std	Y+18, r25	; 0x12
    1190:	89 8b       	std	Y+17, r24	; 0x11
    1192:	89 89       	ldd	r24, Y+17	; 0x11
    1194:	9a 89       	ldd	r25, Y+18	; 0x12
    1196:	01 97       	sbiw	r24, 0x01	; 1
    1198:	f1 f7       	brne	.-4      	; 0x1196 <SystemSetting+0x33e>
    119a:	9a 8b       	std	Y+18, r25	; 0x12
    119c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    119e:	8b 89       	ldd	r24, Y+19	; 0x13
    11a0:	9c 89       	ldd	r25, Y+20	; 0x14
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	9c 8b       	std	Y+20, r25	; 0x14
    11a6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11a8:	8b 89       	ldd	r24, Y+19	; 0x13
    11aa:	9c 89       	ldd	r25, Y+20	; 0x14
    11ac:	00 97       	sbiw	r24, 0x00	; 0
    11ae:	69 f7       	brne	.-38     	; 0x118a <SystemSetting+0x332>
    11b0:	ef ce       	rjmp	.-546    	; 0xf90 <SystemSetting+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11b2:	6d 89       	ldd	r22, Y+21	; 0x15
    11b4:	7e 89       	ldd	r23, Y+22	; 0x16
    11b6:	8f 89       	ldd	r24, Y+23	; 0x17
    11b8:	98 8d       	ldd	r25, Y+24	; 0x18
    11ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11be:	dc 01       	movw	r26, r24
    11c0:	cb 01       	movw	r24, r22
    11c2:	9c 8b       	std	Y+20, r25	; 0x14
    11c4:	8b 8b       	std	Y+19, r24	; 0x13
    11c6:	8b 89       	ldd	r24, Y+19	; 0x13
    11c8:	9c 89       	ldd	r25, Y+20	; 0x14
    11ca:	98 8b       	std	Y+16, r25	; 0x10
    11cc:	8f 87       	std	Y+15, r24	; 0x0f
    11ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    11d0:	98 89       	ldd	r25, Y+16	; 0x10
    11d2:	01 97       	sbiw	r24, 0x01	; 1
    11d4:	f1 f7       	brne	.-4      	; 0x11d2 <SystemSetting+0x37a>
    11d6:	98 8b       	std	Y+16, r25	; 0x10
    11d8:	8f 87       	std	Y+15, r24	; 0x0f
    11da:	da ce       	rjmp	.-588    	; 0xf90 <SystemSetting+0x138>
			_delay_ms(200);
		}
	}

	// Open Door
	else if(KeyPad_getPressedKey() == '-')
    11dc:	0e 94 0b 0b 	call	0x1616	; 0x1616 <KeyPad_getPressedKey>
    11e0:	8d 32       	cpi	r24, 0x2D	; 45
    11e2:	09 f0       	breq	.+2      	; 0x11e6 <SystemSetting+0x38e>
    11e4:	c0 c0       	rjmp	.+384    	; 0x1366 <SystemSetting+0x50e>
	{
		UART_sendByte(OPEN_DOOR_REQ);
    11e6:	8d e0       	ldi	r24, 0x0D	; 13
    11e8:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_sendByte>
		UART_receiveString(OldPassword);
    11ec:	ce 01       	movw	r24, r28
    11ee:	8e 5b       	subi	r24, 0xBE	; 190
    11f0:	9f 4f       	sbci	r25, 0xFF	; 255
    11f2:	0e 94 c0 12 	call	0x2580	; 0x2580 <UART_receiveString>

		while(1)
		{
			LCD_clearScreen();
    11f6:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
			LCD_displayString("Enter PASS !");
    11fa:	86 ee       	ldi	r24, 0xE6	; 230
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
			LCD_goToRowColumn(1,0);
    1202:	81 e0       	ldi	r24, 0x01	; 1
    1204:	60 e0       	ldi	r22, 0x00	; 0
    1206:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_goToRowColumn>

			EnterPassword(MyPassword);
    120a:	ce 01       	movw	r24, r28
    120c:	cc 96       	adiw	r24, 0x3c	; 60
    120e:	0e 94 bd 09 	call	0x137a	; 0x137a <EnterPassword>

			if(count == 2)
    1212:	8b ad       	ldd	r24, Y+59	; 0x3b
    1214:	82 30       	cpi	r24, 0x02	; 2
    1216:	81 f4       	brne	.+32     	; 0x1238 <SystemSetting+0x3e0>
			{
				LCD_clearScreen();
    1218:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
				LCD_displayString("Tried 3 Times");
    121c:	83 ef       	ldi	r24, 0xF3	; 243
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
				UART_sendByte(WRONG_PASSWORD);
    1224:	8f e0       	ldi	r24, 0x0F	; 15
    1226:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_sendByte>

				uint8 buzzerOff = UART_recieveByte();
    122a:	0e 94 88 12 	call	0x2510	; 0x2510 <UART_recieveByte>
    122e:	89 af       	std	Y+57, r24	; 0x39
				if(buzzerOff == BUZZER_OFF)
    1230:	89 ad       	ldd	r24, Y+57	; 0x39
    1232:	83 30       	cpi	r24, 0x03	; 3
    1234:	09 f4       	brne	.+2      	; 0x1238 <SystemSetting+0x3e0>
    1236:	97 c0       	rjmp	.+302    	; 0x1366 <SystemSetting+0x50e>
					break;
			}


			if((strcmp(OldPassword,MyPassword)) == 0)
    1238:	ce 01       	movw	r24, r28
    123a:	8e 5b       	subi	r24, 0xBE	; 190
    123c:	9f 4f       	sbci	r25, 0xFF	; 255
    123e:	9e 01       	movw	r18, r28
    1240:	24 5c       	subi	r18, 0xC4	; 196
    1242:	3f 4f       	sbci	r19, 0xFF	; 255
    1244:	b9 01       	movw	r22, r18
    1246:	0e 94 3a 13 	call	0x2674	; 0x2674 <strcmp>
    124a:	00 97       	sbiw	r24, 0x00	; 0
    124c:	81 f4       	brne	.+32     	; 0x126e <SystemSetting+0x416>
			{
				count = 0;
    124e:	1b ae       	std	Y+59, r1	; 0x3b
				UART_sendByte(OPEN_DOOR);
    1250:	8e e0       	ldi	r24, 0x0E	; 14
    1252:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_sendByte>

				LCD_clearScreen();
    1256:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
				LCD_displayString("Door Is Opening");
    125a:	81 e0       	ldi	r24, 0x01	; 1
    125c:	91 e0       	ldi	r25, 0x01	; 1
    125e:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
				openingMsgFlag = 1;
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	80 93 32 01 	sts	0x0132, r24

				//prepare timer
				PrepareTimer();
    1268:	0e 94 c9 0a 	call	0x1592	; 0x1592 <PrepareTimer>
    126c:	7c c0       	rjmp	.+248    	; 0x1366 <SystemSetting+0x50e>

				break;
			}
			count++;
    126e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1270:	8f 5f       	subi	r24, 0xFF	; 255
    1272:	8b af       	std	Y+59, r24	; 0x3b
			LCD_clearScreen();
    1274:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
			LCD_displayString("Invalid Match");
    1278:	81 e9       	ldi	r24, 0x91	; 145
    127a:	90 e0       	ldi	r25, 0x00	; 0
    127c:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	a6 e9       	ldi	r26, 0x96	; 150
    1286:	b3 e4       	ldi	r27, 0x43	; 67
    1288:	8b 87       	std	Y+11, r24	; 0x0b
    128a:	9c 87       	std	Y+12, r25	; 0x0c
    128c:	ad 87       	std	Y+13, r26	; 0x0d
    128e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1290:	6b 85       	ldd	r22, Y+11	; 0x0b
    1292:	7c 85       	ldd	r23, Y+12	; 0x0c
    1294:	8d 85       	ldd	r24, Y+13	; 0x0d
    1296:	9e 85       	ldd	r25, Y+14	; 0x0e
    1298:	20 e0       	ldi	r18, 0x00	; 0
    129a:	30 e0       	ldi	r19, 0x00	; 0
    129c:	4a e7       	ldi	r20, 0x7A	; 122
    129e:	53 e4       	ldi	r21, 0x43	; 67
    12a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	8f 83       	std	Y+7, r24	; 0x07
    12aa:	98 87       	std	Y+8, r25	; 0x08
    12ac:	a9 87       	std	Y+9, r26	; 0x09
    12ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12b0:	6f 81       	ldd	r22, Y+7	; 0x07
    12b2:	78 85       	ldd	r23, Y+8	; 0x08
    12b4:	89 85       	ldd	r24, Y+9	; 0x09
    12b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b8:	20 e0       	ldi	r18, 0x00	; 0
    12ba:	30 e0       	ldi	r19, 0x00	; 0
    12bc:	40 e8       	ldi	r20, 0x80	; 128
    12be:	5f e3       	ldi	r21, 0x3F	; 63
    12c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12c4:	88 23       	and	r24, r24
    12c6:	2c f4       	brge	.+10     	; 0x12d2 <SystemSetting+0x47a>
		__ticks = 1;
    12c8:	81 e0       	ldi	r24, 0x01	; 1
    12ca:	90 e0       	ldi	r25, 0x00	; 0
    12cc:	9e 83       	std	Y+6, r25	; 0x06
    12ce:	8d 83       	std	Y+5, r24	; 0x05
    12d0:	3f c0       	rjmp	.+126    	; 0x1350 <SystemSetting+0x4f8>
	else if (__tmp > 65535)
    12d2:	6f 81       	ldd	r22, Y+7	; 0x07
    12d4:	78 85       	ldd	r23, Y+8	; 0x08
    12d6:	89 85       	ldd	r24, Y+9	; 0x09
    12d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    12da:	20 e0       	ldi	r18, 0x00	; 0
    12dc:	3f ef       	ldi	r19, 0xFF	; 255
    12de:	4f e7       	ldi	r20, 0x7F	; 127
    12e0:	57 e4       	ldi	r21, 0x47	; 71
    12e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12e6:	18 16       	cp	r1, r24
    12e8:	4c f5       	brge	.+82     	; 0x133c <SystemSetting+0x4e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    12ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    12ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    12f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	30 e0       	ldi	r19, 0x00	; 0
    12f6:	40 e2       	ldi	r20, 0x20	; 32
    12f8:	51 e4       	ldi	r21, 0x41	; 65
    12fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12fe:	dc 01       	movw	r26, r24
    1300:	cb 01       	movw	r24, r22
    1302:	bc 01       	movw	r22, r24
    1304:	cd 01       	movw	r24, r26
    1306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130a:	dc 01       	movw	r26, r24
    130c:	cb 01       	movw	r24, r22
    130e:	9e 83       	std	Y+6, r25	; 0x06
    1310:	8d 83       	std	Y+5, r24	; 0x05
    1312:	0f c0       	rjmp	.+30     	; 0x1332 <SystemSetting+0x4da>
    1314:	89 e1       	ldi	r24, 0x19	; 25
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9c 83       	std	Y+4, r25	; 0x04
    131a:	8b 83       	std	Y+3, r24	; 0x03
    131c:	8b 81       	ldd	r24, Y+3	; 0x03
    131e:	9c 81       	ldd	r25, Y+4	; 0x04
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <SystemSetting+0x4c8>
    1324:	9c 83       	std	Y+4, r25	; 0x04
    1326:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1328:	8d 81       	ldd	r24, Y+5	; 0x05
    132a:	9e 81       	ldd	r25, Y+6	; 0x06
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	9e 83       	std	Y+6, r25	; 0x06
    1330:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1332:	8d 81       	ldd	r24, Y+5	; 0x05
    1334:	9e 81       	ldd	r25, Y+6	; 0x06
    1336:	00 97       	sbiw	r24, 0x00	; 0
    1338:	69 f7       	brne	.-38     	; 0x1314 <SystemSetting+0x4bc>
    133a:	5d cf       	rjmp	.-326    	; 0x11f6 <SystemSetting+0x39e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    133c:	6f 81       	ldd	r22, Y+7	; 0x07
    133e:	78 85       	ldd	r23, Y+8	; 0x08
    1340:	89 85       	ldd	r24, Y+9	; 0x09
    1342:	9a 85       	ldd	r25, Y+10	; 0x0a
    1344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1348:	dc 01       	movw	r26, r24
    134a:	cb 01       	movw	r24, r22
    134c:	9e 83       	std	Y+6, r25	; 0x06
    134e:	8d 83       	std	Y+5, r24	; 0x05
    1350:	8d 81       	ldd	r24, Y+5	; 0x05
    1352:	9e 81       	ldd	r25, Y+6	; 0x06
    1354:	9a 83       	std	Y+2, r25	; 0x02
    1356:	89 83       	std	Y+1, r24	; 0x01
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	01 97       	sbiw	r24, 0x01	; 1
    135e:	f1 f7       	brne	.-4      	; 0x135c <SystemSetting+0x504>
    1360:	9a 83       	std	Y+2, r25	; 0x02
    1362:	89 83       	std	Y+1, r24	; 0x01
    1364:	48 cf       	rjmp	.-368    	; 0x11f6 <SystemSetting+0x39e>
			_delay_ms(300);

		}
	}
}
    1366:	c3 5b       	subi	r28, 0xB3	; 179
    1368:	df 4f       	sbci	r29, 0xFF	; 255
    136a:	0f b6       	in	r0, 0x3f	; 63
    136c:	f8 94       	cli
    136e:	de bf       	out	0x3e, r29	; 62
    1370:	0f be       	out	0x3f, r0	; 63
    1372:	cd bf       	out	0x3d, r28	; 61
    1374:	cf 91       	pop	r28
    1376:	df 91       	pop	r29
    1378:	08 95       	ret

0000137a <EnterPassword>:

void EnterPassword(uint8 *passwordArr)
{
    137a:	0f 93       	push	r16
    137c:	1f 93       	push	r17
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	cd b7       	in	r28, 0x3d	; 61
    1384:	de b7       	in	r29, 0x3e	; 62
    1386:	62 97       	sbiw	r28, 0x12	; 18
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	9a 8b       	std	Y+18, r25	; 0x12
    1394:	89 8b       	std	Y+17, r24	; 0x11
	for(int i=0; i<5; i++)
    1396:	18 8a       	std	Y+16, r1	; 0x10
    1398:	1f 86       	std	Y+15, r1	; 0x0f
    139a:	85 c0       	rjmp	.+266    	; 0x14a6 <EnterPassword+0x12c>
	{
		passwordArr[i] = KeyPad_getPressedKey();
    139c:	2f 85       	ldd	r18, Y+15	; 0x0f
    139e:	38 89       	ldd	r19, Y+16	; 0x10
    13a0:	89 89       	ldd	r24, Y+17	; 0x11
    13a2:	9a 89       	ldd	r25, Y+18	; 0x12
    13a4:	8c 01       	movw	r16, r24
    13a6:	02 0f       	add	r16, r18
    13a8:	13 1f       	adc	r17, r19
    13aa:	0e 94 0b 0b 	call	0x1616	; 0x1616 <KeyPad_getPressedKey>
    13ae:	f8 01       	movw	r30, r16
    13b0:	80 83       	st	Z, r24

		LCD_displayCharacter('*');
    13b2:	8a e2       	ldi	r24, 0x2A	; 42
    13b4:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_displayCharacter>
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a8 e4       	ldi	r26, 0x48	; 72
    13be:	b2 e4       	ldi	r27, 0x42	; 66
    13c0:	8b 87       	std	Y+11, r24	; 0x0b
    13c2:	9c 87       	std	Y+12, r25	; 0x0c
    13c4:	ad 87       	std	Y+13, r26	; 0x0d
    13c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    13cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	4a e7       	ldi	r20, 0x7A	; 122
    13d6:	53 e4       	ldi	r21, 0x43	; 67
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	8f 83       	std	Y+7, r24	; 0x07
    13e2:	98 87       	std	Y+8, r25	; 0x08
    13e4:	a9 87       	std	Y+9, r26	; 0x09
    13e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ea:	78 85       	ldd	r23, Y+8	; 0x08
    13ec:	89 85       	ldd	r24, Y+9	; 0x09
    13ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	2c f4       	brge	.+10     	; 0x140a <EnterPassword+0x90>
		__ticks = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	8d 83       	std	Y+5, r24	; 0x05
    1408:	3f c0       	rjmp	.+126    	; 0x1488 <EnterPassword+0x10e>
	else if (__tmp > 65535)
    140a:	6f 81       	ldd	r22, Y+7	; 0x07
    140c:	78 85       	ldd	r23, Y+8	; 0x08
    140e:	89 85       	ldd	r24, Y+9	; 0x09
    1410:	9a 85       	ldd	r25, Y+10	; 0x0a
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	4c f5       	brge	.+82     	; 0x1474 <EnterPassword+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1422:	6b 85       	ldd	r22, Y+11	; 0x0b
    1424:	7c 85       	ldd	r23, Y+12	; 0x0c
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
    144a:	0f c0       	rjmp	.+30     	; 0x146a <EnterPassword+0xf0>
    144c:	89 e1       	ldi	r24, 0x19	; 25
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9c 83       	std	Y+4, r25	; 0x04
    1452:	8b 83       	std	Y+3, r24	; 0x03
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <EnterPassword+0xde>
    145c:	9c 83       	std	Y+4, r25	; 0x04
    145e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	9e 81       	ldd	r25, Y+6	; 0x06
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	69 f7       	brne	.-38     	; 0x144c <EnterPassword+0xd2>
    1472:	14 c0       	rjmp	.+40     	; 0x149c <EnterPassword+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1474:	6f 81       	ldd	r22, Y+7	; 0x07
    1476:	78 85       	ldd	r23, Y+8	; 0x08
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	9a 81       	ldd	r25, Y+2	; 0x02
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <EnterPassword+0x11a>
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	89 83       	std	Y+1, r24	; 0x01
	}
}

void EnterPassword(uint8 *passwordArr)
{
	for(int i=0; i<5; i++)
    149c:	8f 85       	ldd	r24, Y+15	; 0x0f
    149e:	98 89       	ldd	r25, Y+16	; 0x10
    14a0:	01 96       	adiw	r24, 0x01	; 1
    14a2:	98 8b       	std	Y+16, r25	; 0x10
    14a4:	8f 87       	std	Y+15, r24	; 0x0f
    14a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a8:	98 89       	ldd	r25, Y+16	; 0x10
    14aa:	85 30       	cpi	r24, 0x05	; 5
    14ac:	91 05       	cpc	r25, r1
    14ae:	0c f4       	brge	.+2      	; 0x14b2 <EnterPassword+0x138>
    14b0:	75 cf       	rjmp	.-278    	; 0x139c <EnterPassword+0x22>
		passwordArr[i] = KeyPad_getPressedKey();

		LCD_displayCharacter('*');
		_delay_ms(50);
	}
	passwordArr[5]='\0';
    14b2:	89 89       	ldd	r24, Y+17	; 0x11
    14b4:	9a 89       	ldd	r25, Y+18	; 0x12
    14b6:	fc 01       	movw	r30, r24
    14b8:	35 96       	adiw	r30, 0x05	; 5
    14ba:	10 82       	st	Z, r1
}
    14bc:	62 96       	adiw	r28, 0x12	; 18
    14be:	0f b6       	in	r0, 0x3f	; 63
    14c0:	f8 94       	cli
    14c2:	de bf       	out	0x3e, r29	; 62
    14c4:	0f be       	out	0x3f, r0	; 63
    14c6:	cd bf       	out	0x3d, r28	; 61
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	1f 91       	pop	r17
    14ce:	0f 91       	pop	r16
    14d0:	08 95       	ret

000014d2 <PrepareToSend>:

/* Function to add # to the new password in the buffer that is save in to prepare send it by UART to MC1 */
void PrepareToSend(uint8 array1[], uint8 array2[])
{
    14d2:	df 93       	push	r29
    14d4:	cf 93       	push	r28
    14d6:	00 d0       	rcall	.+0      	; 0x14d8 <PrepareToSend+0x6>
    14d8:	00 d0       	rcall	.+0      	; 0x14da <PrepareToSend+0x8>
    14da:	00 d0       	rcall	.+0      	; 0x14dc <PrepareToSend+0xa>
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	9c 83       	std	Y+4, r25	; 0x04
    14e2:	8b 83       	std	Y+3, r24	; 0x03
    14e4:	7e 83       	std	Y+6, r23	; 0x06
    14e6:	6d 83       	std	Y+5, r22	; 0x05
	int i = 0;
    14e8:	1a 82       	std	Y+2, r1	; 0x02
    14ea:	19 82       	std	Y+1, r1	; 0x01
	for( i=0; i<6; i++)
    14ec:	1a 82       	std	Y+2, r1	; 0x02
    14ee:	19 82       	std	Y+1, r1	; 0x01
    14f0:	23 c0       	rjmp	.+70     	; 0x1538 <PrepareToSend+0x66>
	{
		array2[i] = array1[i];
    14f2:	29 81       	ldd	r18, Y+1	; 0x01
    14f4:	3a 81       	ldd	r19, Y+2	; 0x02
    14f6:	8d 81       	ldd	r24, Y+5	; 0x05
    14f8:	9e 81       	ldd	r25, Y+6	; 0x06
    14fa:	dc 01       	movw	r26, r24
    14fc:	a2 0f       	add	r26, r18
    14fe:	b3 1f       	adc	r27, r19
    1500:	29 81       	ldd	r18, Y+1	; 0x01
    1502:	3a 81       	ldd	r19, Y+2	; 0x02
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	9c 81       	ldd	r25, Y+4	; 0x04
    1508:	fc 01       	movw	r30, r24
    150a:	e2 0f       	add	r30, r18
    150c:	f3 1f       	adc	r31, r19
    150e:	80 81       	ld	r24, Z
    1510:	8c 93       	st	X, r24
		if(i == 5)
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	9a 81       	ldd	r25, Y+2	; 0x02
    1516:	85 30       	cpi	r24, 0x05	; 5
    1518:	91 05       	cpc	r25, r1
    151a:	49 f4       	brne	.+18     	; 0x152e <PrepareToSend+0x5c>
		{
			array2[i] = '#';
    151c:	29 81       	ldd	r18, Y+1	; 0x01
    151e:	3a 81       	ldd	r19, Y+2	; 0x02
    1520:	8d 81       	ldd	r24, Y+5	; 0x05
    1522:	9e 81       	ldd	r25, Y+6	; 0x06
    1524:	fc 01       	movw	r30, r24
    1526:	e2 0f       	add	r30, r18
    1528:	f3 1f       	adc	r31, r19
    152a:	83 e2       	ldi	r24, 0x23	; 35
    152c:	80 83       	st	Z, r24

/* Function to add # to the new password in the buffer that is save in to prepare send it by UART to MC1 */
void PrepareToSend(uint8 array1[], uint8 array2[])
{
	int i = 0;
	for( i=0; i<6; i++)
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	01 96       	adiw	r24, 0x01	; 1
    1534:	9a 83       	std	Y+2, r25	; 0x02
    1536:	89 83       	std	Y+1, r24	; 0x01
    1538:	89 81       	ldd	r24, Y+1	; 0x01
    153a:	9a 81       	ldd	r25, Y+2	; 0x02
    153c:	86 30       	cpi	r24, 0x06	; 6
    153e:	91 05       	cpc	r25, r1
    1540:	c4 f2       	brlt	.-80     	; 0x14f2 <PrepareToSend+0x20>
		if(i == 5)
		{
			array2[i] = '#';
		}
	}
}
    1542:	26 96       	adiw	r28, 0x06	; 6
    1544:	0f b6       	in	r0, 0x3f	; 63
    1546:	f8 94       	cli
    1548:	de bf       	out	0x3e, r29	; 62
    154a:	0f be       	out	0x3f, r0	; 63
    154c:	cd bf       	out	0x3d, r28	; 61
    154e:	cf 91       	pop	r28
    1550:	df 91       	pop	r29
    1552:	08 95       	ret

00001554 <Door_Closing>:

void Door_Closing(void)
{
    1554:	df 93       	push	r29
    1556:	cf 93       	push	r28
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    155c:	80 91 31 01 	lds	r24, 0x0131
    1560:	8f 5f       	subi	r24, 0xFF	; 255
    1562:	80 93 31 01 	sts	0x0131, r24
	if(g_tick == 120)
    1566:	80 91 31 01 	lds	r24, 0x0131
    156a:	88 37       	cpi	r24, 0x78	; 120
    156c:	39 f4       	brne	.+14     	; 0x157c <Door_Closing+0x28>
	{
		LCD_clearScreen();
    156e:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
		LCD_displayString("Door Is Closing");
    1572:	81 e1       	ldi	r24, 0x11	; 17
    1574:	91 e0       	ldi	r25, 0x01	; 1
    1576:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
    157a:	08 c0       	rjmp	.+16     	; 0x158c <Door_Closing+0x38>
	}
	else if(g_tick == 240 )
    157c:	80 91 31 01 	lds	r24, 0x0131
    1580:	80 3f       	cpi	r24, 0xF0	; 240
    1582:	21 f4       	brne	.+8      	; 0x158c <Door_Closing+0x38>
	{
		LCD_clearScreen();
    1584:	0e 94 3b 11 	call	0x2276	; 0x2276 <LCD_clearScreen>
		openingMsgFlag = 0;
    1588:	10 92 32 01 	sts	0x0132, r1
		//g_tick=0;
	}
}
    158c:	cf 91       	pop	r28
    158e:	df 91       	pop	r29
    1590:	08 95       	ret

00001592 <PrepareTimer>:
void PrepareTimer(void)
{
    1592:	df 93       	push	r29
    1594:	cf 93       	push	r28
    1596:	cd b7       	in	r28, 0x3d	; 61
    1598:	de b7       	in	r29, 0x3e	; 62
    159a:	2b 97       	sbiw	r28, 0x0b	; 11
    159c:	0f b6       	in	r0, 0x3f	; 63
    159e:	f8 94       	cli
    15a0:	de bf       	out	0x3e, r29	; 62
    15a2:	0f be       	out	0x3f, r0	; 63
    15a4:	cd bf       	out	0x3d, r28	; 61
	Timer0_ConfigType Timer0_Config = {CTC,NORMAL_OC0_DISCONNECTED,F_CPU_1024,CTC_INTERRUPT,0,250};
    15a6:	ce 01       	movw	r24, r28
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	98 87       	std	Y+8, r25	; 0x08
    15ac:	8f 83       	std	Y+7, r24	; 0x07
    15ae:	e9 e2       	ldi	r30, 0x29	; 41
    15b0:	f1 e0       	ldi	r31, 0x01	; 1
    15b2:	fa 87       	std	Y+10, r31	; 0x0a
    15b4:	e9 87       	std	Y+9, r30	; 0x09
    15b6:	f6 e0       	ldi	r31, 0x06	; 6
    15b8:	fb 87       	std	Y+11, r31	; 0x0b
    15ba:	e9 85       	ldd	r30, Y+9	; 0x09
    15bc:	fa 85       	ldd	r31, Y+10	; 0x0a
    15be:	00 80       	ld	r0, Z
    15c0:	89 85       	ldd	r24, Y+9	; 0x09
    15c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15c4:	01 96       	adiw	r24, 0x01	; 1
    15c6:	9a 87       	std	Y+10, r25	; 0x0a
    15c8:	89 87       	std	Y+9, r24	; 0x09
    15ca:	ef 81       	ldd	r30, Y+7	; 0x07
    15cc:	f8 85       	ldd	r31, Y+8	; 0x08
    15ce:	00 82       	st	Z, r0
    15d0:	8f 81       	ldd	r24, Y+7	; 0x07
    15d2:	98 85       	ldd	r25, Y+8	; 0x08
    15d4:	01 96       	adiw	r24, 0x01	; 1
    15d6:	98 87       	std	Y+8, r25	; 0x08
    15d8:	8f 83       	std	Y+7, r24	; 0x07
    15da:	9b 85       	ldd	r25, Y+11	; 0x0b
    15dc:	91 50       	subi	r25, 0x01	; 1
    15de:	9b 87       	std	Y+11, r25	; 0x0b
    15e0:	eb 85       	ldd	r30, Y+11	; 0x0b
    15e2:	ee 23       	and	r30, r30
    15e4:	51 f7       	brne	.-44     	; 0x15ba <PrepareTimer+0x28>
	SREG |=(1<<7);
    15e6:	af e5       	ldi	r26, 0x5F	; 95
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ef e5       	ldi	r30, 0x5F	; 95
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 68       	ori	r24, 0x80	; 128
    15f2:	8c 93       	st	X, r24
	Timer0_init(&Timer0_Config);
    15f4:	ce 01       	movw	r24, r28
    15f6:	01 96       	adiw	r24, 0x01	; 1
    15f8:	0e 94 b0 11 	call	0x2360	; 0x2360 <Timer0_init>
	Timer0_setCallBack(Door_Closing);
    15fc:	8a ea       	ldi	r24, 0xAA	; 170
    15fe:	9a e0       	ldi	r25, 0x0A	; 10
    1600:	0e 94 06 12 	call	0x240c	; 0x240c <Timer0_setCallBack>
}
    1604:	2b 96       	adiw	r28, 0x0b	; 11
    1606:	0f b6       	in	r0, 0x3f	; 63
    1608:	f8 94       	cli
    160a:	de bf       	out	0x3e, r29	; 62
    160c:	0f be       	out	0x3f, r0	; 63
    160e:	cd bf       	out	0x3d, r28	; 61
    1610:	cf 91       	pop	r28
    1612:	df 91       	pop	r29
    1614:	08 95       	ret

00001616 <KeyPad_getPressedKey>:
#endif

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
    1616:	df 93       	push	r29
    1618:	cf 93       	push	r28
    161a:	00 d0       	rcall	.+0      	; 0x161c <KeyPad_getPressedKey+0x6>
    161c:	cd b7       	in	r28, 0x3d	; 61
    161e:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    1620:	1a 82       	std	Y+2, r1	; 0x02
    1622:	4c c0       	rjmp	.+152    	; 0x16bc <KeyPad_getPressedKey+0xa6>
		{
			/* 
			 * each time only one of the column pins will be output and 
			 * the rest will be input pins include the row pins 
			 */ 
			KEYPAD_PORT_DIR = (0b00010000<<col); 
    1624:	ea e3       	ldi	r30, 0x3A	; 58
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	28 2f       	mov	r18, r24
    162c:	30 e0       	ldi	r19, 0x00	; 0
    162e:	80 e1       	ldi	r24, 0x10	; 16
    1630:	90 e0       	ldi	r25, 0x00	; 0
    1632:	02 c0       	rjmp	.+4      	; 0x1638 <KeyPad_getPressedKey+0x22>
    1634:	88 0f       	add	r24, r24
    1636:	99 1f       	adc	r25, r25
    1638:	2a 95       	dec	r18
    163a:	e2 f7       	brpl	.-8      	; 0x1634 <KeyPad_getPressedKey+0x1e>
    163c:	80 83       	st	Z, r24
			
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
    163e:	eb e3       	ldi	r30, 0x3B	; 59
    1640:	f0 e0       	ldi	r31, 0x00	; 0
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	28 2f       	mov	r18, r24
    1646:	30 e0       	ldi	r19, 0x00	; 0
    1648:	80 e1       	ldi	r24, 0x10	; 16
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <KeyPad_getPressedKey+0x3e>
    1650:	88 0f       	add	r24, r24
    1652:	99 1f       	adc	r25, r25
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <KeyPad_getPressedKey+0x3a>
    1658:	80 95       	com	r24
    165a:	80 83       	st	Z, r24
			for(row=0;row<N_row;row++) /* loop for rows */
    165c:	19 82       	std	Y+1, r1	; 0x01
    165e:	28 c0       	rjmp	.+80     	; 0x16b0 <KeyPad_getPressedKey+0x9a>
			{
				if(BIT_IS_CLEAR(KEYPAD_PORT_IN,row)) /* if the switch is press in this row */ 
    1660:	e9 e3       	ldi	r30, 0x39	; 57
    1662:	f0 e0       	ldi	r31, 0x00	; 0
    1664:	80 81       	ld	r24, Z
    1666:	28 2f       	mov	r18, r24
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	88 2f       	mov	r24, r24
    166e:	90 e0       	ldi	r25, 0x00	; 0
    1670:	a9 01       	movw	r20, r18
    1672:	02 c0       	rjmp	.+4      	; 0x1678 <KeyPad_getPressedKey+0x62>
    1674:	55 95       	asr	r21
    1676:	47 95       	ror	r20
    1678:	8a 95       	dec	r24
    167a:	e2 f7       	brpl	.-8      	; 0x1674 <KeyPad_getPressedKey+0x5e>
    167c:	ca 01       	movw	r24, r20
    167e:	81 70       	andi	r24, 0x01	; 1
    1680:	90 70       	andi	r25, 0x00	; 0
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	91 f4       	brne	.+36     	; 0x16aa <KeyPad_getPressedKey+0x94>
				{
					#if (N_col == 3)  
						return KeyPad_4x3_adjustKeyNumber((row*N_col)+col+1); 
					#elif (N_col == 4)
						return KeyPad_4x4_adjustKeyNumber((row*N_col)+col+1);
    1686:	89 81       	ldd	r24, Y+1	; 0x01
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	98 2f       	mov	r25, r24
    1696:	8a 81       	ldd	r24, Y+2	; 0x02
    1698:	89 0f       	add	r24, r25
    169a:	8f 5f       	subi	r24, 0xFF	; 255
    169c:	0e 94 63 0b 	call	0x16c6	; 0x16c6 <KeyPad_4x4_adjustKeyNumber>
					#endif				
				}
			}
		}
	}	
}
    16a0:	0f 90       	pop	r0
    16a2:	0f 90       	pop	r0
    16a4:	cf 91       	pop	r28
    16a6:	df 91       	pop	r29
    16a8:	08 95       	ret
			/* 
			 * clear the output pin column in this trace and enable the internal 
			 * pull up resistors for the rows pins
			 */ 
			KEYPAD_PORT_OUT = (~(0b00010000<<col)); 
			for(row=0;row<N_row;row++) /* loop for rows */
    16aa:	89 81       	ldd	r24, Y+1	; 0x01
    16ac:	8f 5f       	subi	r24, 0xFF	; 255
    16ae:	89 83       	std	Y+1, r24	; 0x01
    16b0:	89 81       	ldd	r24, Y+1	; 0x01
    16b2:	84 30       	cpi	r24, 0x04	; 4
    16b4:	a8 f2       	brcs	.-86     	; 0x1660 <KeyPad_getPressedKey+0x4a>
 *******************************************************************************/
uint8 KeyPad_getPressedKey(void){
	uint8 col,row;
	while(1)
	{
		for(col=0;col<N_col;col++) /* loop for columns */
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	8f 5f       	subi	r24, 0xFF	; 255
    16ba:	8a 83       	std	Y+2, r24	; 0x02
    16bc:	8a 81       	ldd	r24, Y+2	; 0x02
    16be:	84 30       	cpi	r24, 0x04	; 4
    16c0:	08 f4       	brcc	.+2      	; 0x16c4 <KeyPad_getPressedKey+0xae>
    16c2:	b0 cf       	rjmp	.-160    	; 0x1624 <KeyPad_getPressedKey+0xe>
    16c4:	ad cf       	rjmp	.-166    	; 0x1620 <KeyPad_getPressedKey+0xa>

000016c6 <KeyPad_4x4_adjustKeyNumber>:
} 

#elif (N_col == 4)
 
static uint8 KeyPad_4x4_adjustKeyNumber(uint8 button_number)
{
    16c6:	df 93       	push	r29
    16c8:	cf 93       	push	r28
    16ca:	cd b7       	in	r28, 0x3d	; 61
    16cc:	de b7       	in	r29, 0x3e	; 62
    16ce:	62 97       	sbiw	r28, 0x12	; 18
    16d0:	0f b6       	in	r0, 0x3f	; 63
    16d2:	f8 94       	cli
    16d4:	de bf       	out	0x3e, r29	; 62
    16d6:	0f be       	out	0x3f, r0	; 63
    16d8:	cd bf       	out	0x3d, r28	; 61
    16da:	8f 87       	std	Y+15, r24	; 0x0f
    16dc:	80 e0       	ldi	r24, 0x00	; 0
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	a6 e9       	ldi	r26, 0x96	; 150
    16e2:	b3 e4       	ldi	r27, 0x43	; 67
    16e4:	8b 87       	std	Y+11, r24	; 0x0b
    16e6:	9c 87       	std	Y+12, r25	; 0x0c
    16e8:	ad 87       	std	Y+13, r26	; 0x0d
    16ea:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    16ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    16f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	4a e7       	ldi	r20, 0x7A	; 122
    16fa:	53 e4       	ldi	r21, 0x43	; 67
    16fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1700:	dc 01       	movw	r26, r24
    1702:	cb 01       	movw	r24, r22
    1704:	8f 83       	std	Y+7, r24	; 0x07
    1706:	98 87       	std	Y+8, r25	; 0x08
    1708:	a9 87       	std	Y+9, r26	; 0x09
    170a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    170c:	6f 81       	ldd	r22, Y+7	; 0x07
    170e:	78 85       	ldd	r23, Y+8	; 0x08
    1710:	89 85       	ldd	r24, Y+9	; 0x09
    1712:	9a 85       	ldd	r25, Y+10	; 0x0a
    1714:	20 e0       	ldi	r18, 0x00	; 0
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	40 e8       	ldi	r20, 0x80	; 128
    171a:	5f e3       	ldi	r21, 0x3F	; 63
    171c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1720:	88 23       	and	r24, r24
    1722:	2c f4       	brge	.+10     	; 0x172e <KeyPad_4x4_adjustKeyNumber+0x68>
		__ticks = 1;
    1724:	81 e0       	ldi	r24, 0x01	; 1
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	9e 83       	std	Y+6, r25	; 0x06
    172a:	8d 83       	std	Y+5, r24	; 0x05
    172c:	3f c0       	rjmp	.+126    	; 0x17ac <KeyPad_4x4_adjustKeyNumber+0xe6>
	else if (__tmp > 65535)
    172e:	6f 81       	ldd	r22, Y+7	; 0x07
    1730:	78 85       	ldd	r23, Y+8	; 0x08
    1732:	89 85       	ldd	r24, Y+9	; 0x09
    1734:	9a 85       	ldd	r25, Y+10	; 0x0a
    1736:	20 e0       	ldi	r18, 0x00	; 0
    1738:	3f ef       	ldi	r19, 0xFF	; 255
    173a:	4f e7       	ldi	r20, 0x7F	; 127
    173c:	57 e4       	ldi	r21, 0x47	; 71
    173e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1742:	18 16       	cp	r1, r24
    1744:	4c f5       	brge	.+82     	; 0x1798 <KeyPad_4x4_adjustKeyNumber+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1746:	6b 85       	ldd	r22, Y+11	; 0x0b
    1748:	7c 85       	ldd	r23, Y+12	; 0x0c
    174a:	8d 85       	ldd	r24, Y+13	; 0x0d
    174c:	9e 85       	ldd	r25, Y+14	; 0x0e
    174e:	20 e0       	ldi	r18, 0x00	; 0
    1750:	30 e0       	ldi	r19, 0x00	; 0
    1752:	40 e2       	ldi	r20, 0x20	; 32
    1754:	51 e4       	ldi	r21, 0x41	; 65
    1756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175a:	dc 01       	movw	r26, r24
    175c:	cb 01       	movw	r24, r22
    175e:	bc 01       	movw	r22, r24
    1760:	cd 01       	movw	r24, r26
    1762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	0f c0       	rjmp	.+30     	; 0x178e <KeyPad_4x4_adjustKeyNumber+0xc8>
    1770:	89 e1       	ldi	r24, 0x19	; 25
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	9c 83       	std	Y+4, r25	; 0x04
    1776:	8b 83       	std	Y+3, r24	; 0x03
    1778:	8b 81       	ldd	r24, Y+3	; 0x03
    177a:	9c 81       	ldd	r25, Y+4	; 0x04
    177c:	01 97       	sbiw	r24, 0x01	; 1
    177e:	f1 f7       	brne	.-4      	; 0x177c <KeyPad_4x4_adjustKeyNumber+0xb6>
    1780:	9c 83       	std	Y+4, r25	; 0x04
    1782:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1784:	8d 81       	ldd	r24, Y+5	; 0x05
    1786:	9e 81       	ldd	r25, Y+6	; 0x06
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	9e 83       	std	Y+6, r25	; 0x06
    178c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    178e:	8d 81       	ldd	r24, Y+5	; 0x05
    1790:	9e 81       	ldd	r25, Y+6	; 0x06
    1792:	00 97       	sbiw	r24, 0x00	; 0
    1794:	69 f7       	brne	.-38     	; 0x1770 <KeyPad_4x4_adjustKeyNumber+0xaa>
    1796:	14 c0       	rjmp	.+40     	; 0x17c0 <KeyPad_4x4_adjustKeyNumber+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1798:	6f 81       	ldd	r22, Y+7	; 0x07
    179a:	78 85       	ldd	r23, Y+8	; 0x08
    179c:	89 85       	ldd	r24, Y+9	; 0x09
    179e:	9a 85       	ldd	r25, Y+10	; 0x0a
    17a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17a4:	dc 01       	movw	r26, r24
    17a6:	cb 01       	movw	r24, r22
    17a8:	9e 83       	std	Y+6, r25	; 0x06
    17aa:	8d 83       	std	Y+5, r24	; 0x05
    17ac:	8d 81       	ldd	r24, Y+5	; 0x05
    17ae:	9e 81       	ldd	r25, Y+6	; 0x06
    17b0:	9a 83       	std	Y+2, r25	; 0x02
    17b2:	89 83       	std	Y+1, r24	; 0x01
    17b4:	89 81       	ldd	r24, Y+1	; 0x01
    17b6:	9a 81       	ldd	r25, Y+2	; 0x02
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	f1 f7       	brne	.-4      	; 0x17b8 <KeyPad_4x4_adjustKeyNumber+0xf2>
    17bc:	9a 83       	std	Y+2, r25	; 0x02
    17be:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(300);

	switch(button_number)
    17c0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17c2:	28 2f       	mov	r18, r24
    17c4:	30 e0       	ldi	r19, 0x00	; 0
    17c6:	3a 8b       	std	Y+18, r19	; 0x12
    17c8:	29 8b       	std	Y+17, r18	; 0x11
    17ca:	89 89       	ldd	r24, Y+17	; 0x11
    17cc:	9a 89       	ldd	r25, Y+18	; 0x12
    17ce:	88 30       	cpi	r24, 0x08	; 8
    17d0:	91 05       	cpc	r25, r1
    17d2:	09 f4       	brne	.+2      	; 0x17d6 <KeyPad_4x4_adjustKeyNumber+0x110>
    17d4:	70 c0       	rjmp	.+224    	; 0x18b6 <KeyPad_4x4_adjustKeyNumber+0x1f0>
    17d6:	29 89       	ldd	r18, Y+17	; 0x11
    17d8:	3a 89       	ldd	r19, Y+18	; 0x12
    17da:	29 30       	cpi	r18, 0x09	; 9
    17dc:	31 05       	cpc	r19, r1
    17de:	5c f5       	brge	.+86     	; 0x1836 <KeyPad_4x4_adjustKeyNumber+0x170>
    17e0:	89 89       	ldd	r24, Y+17	; 0x11
    17e2:	9a 89       	ldd	r25, Y+18	; 0x12
    17e4:	84 30       	cpi	r24, 0x04	; 4
    17e6:	91 05       	cpc	r25, r1
    17e8:	09 f4       	brne	.+2      	; 0x17ec <KeyPad_4x4_adjustKeyNumber+0x126>
    17ea:	59 c0       	rjmp	.+178    	; 0x189e <KeyPad_4x4_adjustKeyNumber+0x1d8>
    17ec:	29 89       	ldd	r18, Y+17	; 0x11
    17ee:	3a 89       	ldd	r19, Y+18	; 0x12
    17f0:	25 30       	cpi	r18, 0x05	; 5
    17f2:	31 05       	cpc	r19, r1
    17f4:	9c f4       	brge	.+38     	; 0x181c <KeyPad_4x4_adjustKeyNumber+0x156>
    17f6:	89 89       	ldd	r24, Y+17	; 0x11
    17f8:	9a 89       	ldd	r25, Y+18	; 0x12
    17fa:	82 30       	cpi	r24, 0x02	; 2
    17fc:	91 05       	cpc	r25, r1
    17fe:	09 f4       	brne	.+2      	; 0x1802 <KeyPad_4x4_adjustKeyNumber+0x13c>
    1800:	48 c0       	rjmp	.+144    	; 0x1892 <KeyPad_4x4_adjustKeyNumber+0x1cc>
    1802:	29 89       	ldd	r18, Y+17	; 0x11
    1804:	3a 89       	ldd	r19, Y+18	; 0x12
    1806:	23 30       	cpi	r18, 0x03	; 3
    1808:	31 05       	cpc	r19, r1
    180a:	0c f0       	brlt	.+2      	; 0x180e <KeyPad_4x4_adjustKeyNumber+0x148>
    180c:	45 c0       	rjmp	.+138    	; 0x1898 <KeyPad_4x4_adjustKeyNumber+0x1d2>
    180e:	89 89       	ldd	r24, Y+17	; 0x11
    1810:	9a 89       	ldd	r25, Y+18	; 0x12
    1812:	81 30       	cpi	r24, 0x01	; 1
    1814:	91 05       	cpc	r25, r1
    1816:	09 f4       	brne	.+2      	; 0x181a <KeyPad_4x4_adjustKeyNumber+0x154>
    1818:	39 c0       	rjmp	.+114    	; 0x188c <KeyPad_4x4_adjustKeyNumber+0x1c6>
    181a:	67 c0       	rjmp	.+206    	; 0x18ea <KeyPad_4x4_adjustKeyNumber+0x224>
    181c:	29 89       	ldd	r18, Y+17	; 0x11
    181e:	3a 89       	ldd	r19, Y+18	; 0x12
    1820:	26 30       	cpi	r18, 0x06	; 6
    1822:	31 05       	cpc	r19, r1
    1824:	09 f4       	brne	.+2      	; 0x1828 <KeyPad_4x4_adjustKeyNumber+0x162>
    1826:	41 c0       	rjmp	.+130    	; 0x18aa <KeyPad_4x4_adjustKeyNumber+0x1e4>
    1828:	89 89       	ldd	r24, Y+17	; 0x11
    182a:	9a 89       	ldd	r25, Y+18	; 0x12
    182c:	87 30       	cpi	r24, 0x07	; 7
    182e:	91 05       	cpc	r25, r1
    1830:	0c f0       	brlt	.+2      	; 0x1834 <KeyPad_4x4_adjustKeyNumber+0x16e>
    1832:	3e c0       	rjmp	.+124    	; 0x18b0 <KeyPad_4x4_adjustKeyNumber+0x1ea>
    1834:	37 c0       	rjmp	.+110    	; 0x18a4 <KeyPad_4x4_adjustKeyNumber+0x1de>
    1836:	29 89       	ldd	r18, Y+17	; 0x11
    1838:	3a 89       	ldd	r19, Y+18	; 0x12
    183a:	2c 30       	cpi	r18, 0x0C	; 12
    183c:	31 05       	cpc	r19, r1
    183e:	09 f4       	brne	.+2      	; 0x1842 <KeyPad_4x4_adjustKeyNumber+0x17c>
    1840:	46 c0       	rjmp	.+140    	; 0x18ce <KeyPad_4x4_adjustKeyNumber+0x208>
    1842:	89 89       	ldd	r24, Y+17	; 0x11
    1844:	9a 89       	ldd	r25, Y+18	; 0x12
    1846:	8d 30       	cpi	r24, 0x0D	; 13
    1848:	91 05       	cpc	r25, r1
    184a:	5c f4       	brge	.+22     	; 0x1862 <KeyPad_4x4_adjustKeyNumber+0x19c>
    184c:	29 89       	ldd	r18, Y+17	; 0x11
    184e:	3a 89       	ldd	r19, Y+18	; 0x12
    1850:	2a 30       	cpi	r18, 0x0A	; 10
    1852:	31 05       	cpc	r19, r1
    1854:	b1 f1       	breq	.+108    	; 0x18c2 <KeyPad_4x4_adjustKeyNumber+0x1fc>
    1856:	89 89       	ldd	r24, Y+17	; 0x11
    1858:	9a 89       	ldd	r25, Y+18	; 0x12
    185a:	8b 30       	cpi	r24, 0x0B	; 11
    185c:	91 05       	cpc	r25, r1
    185e:	a4 f5       	brge	.+104    	; 0x18c8 <KeyPad_4x4_adjustKeyNumber+0x202>
    1860:	2d c0       	rjmp	.+90     	; 0x18bc <KeyPad_4x4_adjustKeyNumber+0x1f6>
    1862:	29 89       	ldd	r18, Y+17	; 0x11
    1864:	3a 89       	ldd	r19, Y+18	; 0x12
    1866:	2e 30       	cpi	r18, 0x0E	; 14
    1868:	31 05       	cpc	r19, r1
    186a:	b9 f1       	breq	.+110    	; 0x18da <KeyPad_4x4_adjustKeyNumber+0x214>
    186c:	89 89       	ldd	r24, Y+17	; 0x11
    186e:	9a 89       	ldd	r25, Y+18	; 0x12
    1870:	8e 30       	cpi	r24, 0x0E	; 14
    1872:	91 05       	cpc	r25, r1
    1874:	7c f1       	brlt	.+94     	; 0x18d4 <KeyPad_4x4_adjustKeyNumber+0x20e>
    1876:	29 89       	ldd	r18, Y+17	; 0x11
    1878:	3a 89       	ldd	r19, Y+18	; 0x12
    187a:	2f 30       	cpi	r18, 0x0F	; 15
    187c:	31 05       	cpc	r19, r1
    187e:	79 f1       	breq	.+94     	; 0x18de <KeyPad_4x4_adjustKeyNumber+0x218>
    1880:	89 89       	ldd	r24, Y+17	; 0x11
    1882:	9a 89       	ldd	r25, Y+18	; 0x12
    1884:	80 31       	cpi	r24, 0x10	; 16
    1886:	91 05       	cpc	r25, r1
    1888:	69 f1       	breq	.+90     	; 0x18e4 <KeyPad_4x4_adjustKeyNumber+0x21e>
    188a:	2f c0       	rjmp	.+94     	; 0x18ea <KeyPad_4x4_adjustKeyNumber+0x224>
	{
		case 1: return 7; 
    188c:	97 e0       	ldi	r25, 0x07	; 7
    188e:	98 8b       	std	Y+16, r25	; 0x10
    1890:	2e c0       	rjmp	.+92     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 2: return 8; 
    1892:	28 e0       	ldi	r18, 0x08	; 8
    1894:	28 8b       	std	Y+16, r18	; 0x10
    1896:	2b c0       	rjmp	.+86     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 3: return 9; 
    1898:	39 e0       	ldi	r19, 0x09	; 9
    189a:	38 8b       	std	Y+16, r19	; 0x10
    189c:	28 c0       	rjmp	.+80     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 4: return '%'; // ASCII Code of %
    189e:	85 e2       	ldi	r24, 0x25	; 37
    18a0:	88 8b       	std	Y+16, r24	; 0x10
    18a2:	25 c0       	rjmp	.+74     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 5: return 4; 
    18a4:	94 e0       	ldi	r25, 0x04	; 4
    18a6:	98 8b       	std	Y+16, r25	; 0x10
    18a8:	22 c0       	rjmp	.+68     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 6: return 5;
    18aa:	25 e0       	ldi	r18, 0x05	; 5
    18ac:	28 8b       	std	Y+16, r18	; 0x10
    18ae:	1f c0       	rjmp	.+62     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 7: return 6; 
    18b0:	36 e0       	ldi	r19, 0x06	; 6
    18b2:	38 8b       	std	Y+16, r19	; 0x10
    18b4:	1c c0       	rjmp	.+56     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 8: return '*'; /* ASCII Code of '*' */
    18b6:	8a e2       	ldi	r24, 0x2A	; 42
    18b8:	88 8b       	std	Y+16, r24	; 0x10
    18ba:	19 c0       	rjmp	.+50     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;		
		case 9: return 1; 
    18bc:	91 e0       	ldi	r25, 0x01	; 1
    18be:	98 8b       	std	Y+16, r25	; 0x10
    18c0:	16 c0       	rjmp	.+44     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 10: return 2; 
    18c2:	22 e0       	ldi	r18, 0x02	; 2
    18c4:	28 8b       	std	Y+16, r18	; 0x10
    18c6:	13 c0       	rjmp	.+38     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 11: return 3; 
    18c8:	33 e0       	ldi	r19, 0x03	; 3
    18ca:	38 8b       	std	Y+16, r19	; 0x10
    18cc:	10 c0       	rjmp	.+32     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 12: return '-'; /* ASCII Code of '-' */
    18ce:	8d e2       	ldi	r24, 0x2D	; 45
    18d0:	88 8b       	std	Y+16, r24	; 0x10
    18d2:	0d c0       	rjmp	.+26     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 13: return 13;  /* ASCII of Enter */
    18d4:	9d e0       	ldi	r25, 0x0D	; 13
    18d6:	98 8b       	std	Y+16, r25	; 0x10
    18d8:	0a c0       	rjmp	.+20     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;			
		case 14: return 0; 
    18da:	18 8a       	std	Y+16, r1	; 0x10
    18dc:	08 c0       	rjmp	.+16     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 15: return '='; /* ASCII Code of '=' */
    18de:	2d e3       	ldi	r18, 0x3D	; 61
    18e0:	28 8b       	std	Y+16, r18	; 0x10
    18e2:	05 c0       	rjmp	.+10     	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		case 16: return '+'; /* ASCII Code of '+' */
    18e4:	3b e2       	ldi	r19, 0x2B	; 43
    18e6:	38 8b       	std	Y+16, r19	; 0x10
    18e8:	02 c0       	rjmp	.+4      	; 0x18ee <KeyPad_4x4_adjustKeyNumber+0x228>
				break;
		default: return button_number;								 						
    18ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ec:	88 8b       	std	Y+16, r24	; 0x10
    18ee:	88 89       	ldd	r24, Y+16	; 0x10
	}
} 
    18f0:	62 96       	adiw	r28, 0x12	; 18
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	f8 94       	cli
    18f6:	de bf       	out	0x3e, r29	; 62
    18f8:	0f be       	out	0x3f, r0	; 63
    18fa:	cd bf       	out	0x3d, r28	; 61
    18fc:	cf 91       	pop	r28
    18fe:	df 91       	pop	r29
    1900:	08 95       	ret

00001902 <LCD_init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void LCD_init(void)
{
    1902:	df 93       	push	r29
    1904:	cf 93       	push	r28
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
	LCD_DATA_PORT_DIR = 0xFF; /* Configure the data port as output port */ 
    190a:	e4 e3       	ldi	r30, 0x34	; 52
    190c:	f0 e0       	ldi	r31, 0x00	; 0
    190e:	8f ef       	ldi	r24, 0xFF	; 255
    1910:	80 83       	st	Z, r24
	LCD_CTRL_PORT_DIR |= (1<<E) | (1<<RS) | (1<<RW); /* Configure the control pins(E,RS,RW) as output pins */
    1912:	a1 e3       	ldi	r26, 0x31	; 49
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e1 e3       	ldi	r30, 0x31	; 49
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	80 67       	ori	r24, 0x70	; 112
    191e:	8c 93       	st	X, r24
	
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1920:	88 e3       	ldi	r24, 0x38	; 56
    1922:	0e 94 9c 0c 	call	0x1938	; 0x1938 <LCD_sendCommand>
	
	LCD_sendCommand(CURSOR_OFF); /* cursor off */
    1926:	8c e0       	ldi	r24, 0x0C	; 12
    1928:	0e 94 9c 0c 	call	0x1938	; 0x1938 <LCD_sendCommand>
	
	LCD_sendCommand(CLEAR_COMMAND); /* clear LCD at the beginning */
    192c:	81 e0       	ldi	r24, 0x01	; 1
    192e:	0e 94 9c 0c 	call	0x1938	; 0x1938 <LCD_sendCommand>
}
    1932:	cf 91       	pop	r28
    1934:	df 91       	pop	r29
    1936:	08 95       	ret

00001938 <LCD_sendCommand>:

void LCD_sendCommand(uint8 command)
{
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	e9 97       	sbiw	r28, 0x39	; 57
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	89 af       	std	Y+57, r24	; 0x39
	CLEAR_BIT(LCD_CTRL_PORT,RS); /* Instruction Mode RS=0 */
    194e:	a2 e3       	ldi	r26, 0x32	; 50
    1950:	b0 e0       	ldi	r27, 0x00	; 0
    1952:	e2 e3       	ldi	r30, 0x32	; 50
    1954:	f0 e0       	ldi	r31, 0x00	; 0
    1956:	80 81       	ld	r24, Z
    1958:	8f 7e       	andi	r24, 0xEF	; 239
    195a:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    195c:	a2 e3       	ldi	r26, 0x32	; 50
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e2 e3       	ldi	r30, 0x32	; 50
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	80 81       	ld	r24, Z
    1966:	8f 7d       	andi	r24, 0xDF	; 223
    1968:	8c 93       	st	X, r24
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a0 e8       	ldi	r26, 0x80	; 128
    1970:	bf e3       	ldi	r27, 0x3F	; 63
    1972:	8d ab       	std	Y+53, r24	; 0x35
    1974:	9e ab       	std	Y+54, r25	; 0x36
    1976:	af ab       	std	Y+55, r26	; 0x37
    1978:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197a:	6d a9       	ldd	r22, Y+53	; 0x35
    197c:	7e a9       	ldd	r23, Y+54	; 0x36
    197e:	8f a9       	ldd	r24, Y+55	; 0x37
    1980:	98 ad       	ldd	r25, Y+56	; 0x38
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	4a e7       	ldi	r20, 0x7A	; 122
    1988:	53 e4       	ldi	r21, 0x43	; 67
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	89 ab       	std	Y+49, r24	; 0x31
    1994:	9a ab       	std	Y+50, r25	; 0x32
    1996:	ab ab       	std	Y+51, r26	; 0x33
    1998:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    199a:	69 a9       	ldd	r22, Y+49	; 0x31
    199c:	7a a9       	ldd	r23, Y+50	; 0x32
    199e:	8b a9       	ldd	r24, Y+51	; 0x33
    19a0:	9c a9       	ldd	r25, Y+52	; 0x34
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	5f e3       	ldi	r21, 0x3F	; 63
    19aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	2c f4       	brge	.+10     	; 0x19bc <LCD_sendCommand+0x84>
		__ticks = 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	98 ab       	std	Y+48, r25	; 0x30
    19b8:	8f a7       	std	Y+47, r24	; 0x2f
    19ba:	3f c0       	rjmp	.+126    	; 0x1a3a <LCD_sendCommand+0x102>
	else if (__tmp > 65535)
    19bc:	69 a9       	ldd	r22, Y+49	; 0x31
    19be:	7a a9       	ldd	r23, Y+50	; 0x32
    19c0:	8b a9       	ldd	r24, Y+51	; 0x33
    19c2:	9c a9       	ldd	r25, Y+52	; 0x34
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	3f ef       	ldi	r19, 0xFF	; 255
    19c8:	4f e7       	ldi	r20, 0x7F	; 127
    19ca:	57 e4       	ldi	r21, 0x47	; 71
    19cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d0:	18 16       	cp	r1, r24
    19d2:	4c f5       	brge	.+82     	; 0x1a26 <LCD_sendCommand+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d4:	6d a9       	ldd	r22, Y+53	; 0x35
    19d6:	7e a9       	ldd	r23, Y+54	; 0x36
    19d8:	8f a9       	ldd	r24, Y+55	; 0x37
    19da:	98 ad       	ldd	r25, Y+56	; 0x38
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e2       	ldi	r20, 0x20	; 32
    19e2:	51 e4       	ldi	r21, 0x41	; 65
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	98 ab       	std	Y+48, r25	; 0x30
    19fa:	8f a7       	std	Y+47, r24	; 0x2f
    19fc:	0f c0       	rjmp	.+30     	; 0x1a1c <LCD_sendCommand+0xe4>
    19fe:	89 e1       	ldi	r24, 0x19	; 25
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9e a7       	std	Y+46, r25	; 0x2e
    1a04:	8d a7       	std	Y+45, r24	; 0x2d
    1a06:	8d a5       	ldd	r24, Y+45	; 0x2d
    1a08:	9e a5       	ldd	r25, Y+46	; 0x2e
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <LCD_sendCommand+0xd2>
    1a0e:	9e a7       	std	Y+46, r25	; 0x2e
    1a10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a12:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a14:	98 a9       	ldd	r25, Y+48	; 0x30
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	98 ab       	std	Y+48, r25	; 0x30
    1a1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	69 f7       	brne	.-38     	; 0x19fe <LCD_sendCommand+0xc6>
    1a24:	14 c0       	rjmp	.+40     	; 0x1a4e <LCD_sendCommand+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a26:	69 a9       	ldd	r22, Y+49	; 0x31
    1a28:	7a a9       	ldd	r23, Y+50	; 0x32
    1a2a:	8b a9       	ldd	r24, Y+51	; 0x33
    1a2c:	9c a9       	ldd	r25, Y+52	; 0x34
    1a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	98 ab       	std	Y+48, r25	; 0x30
    1a38:	8f a7       	std	Y+47, r24	; 0x2f
    1a3a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1a3c:	98 a9       	ldd	r25, Y+48	; 0x30
    1a3e:	9c a7       	std	Y+44, r25	; 0x2c
    1a40:	8b a7       	std	Y+43, r24	; 0x2b
    1a42:	8b a5       	ldd	r24, Y+43	; 0x2b
    1a44:	9c a5       	ldd	r25, Y+44	; 0x2c
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <LCD_sendCommand+0x10e>
    1a4a:	9c a7       	std	Y+44, r25	; 0x2c
    1a4c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1a4e:	a2 e3       	ldi	r26, 0x32	; 50
    1a50:	b0 e0       	ldi	r27, 0x00	; 0
    1a52:	e2 e3       	ldi	r30, 0x32	; 50
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	80 81       	ld	r24, Z
    1a58:	80 64       	ori	r24, 0x40	; 64
    1a5a:	8c 93       	st	X, r24
    1a5c:	80 e0       	ldi	r24, 0x00	; 0
    1a5e:	90 e0       	ldi	r25, 0x00	; 0
    1a60:	a0 e8       	ldi	r26, 0x80	; 128
    1a62:	bf e3       	ldi	r27, 0x3F	; 63
    1a64:	8f a3       	std	Y+39, r24	; 0x27
    1a66:	98 a7       	std	Y+40, r25	; 0x28
    1a68:	a9 a7       	std	Y+41, r26	; 0x29
    1a6a:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a6c:	6f a1       	ldd	r22, Y+39	; 0x27
    1a6e:	78 a5       	ldd	r23, Y+40	; 0x28
    1a70:	89 a5       	ldd	r24, Y+41	; 0x29
    1a72:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a74:	20 e0       	ldi	r18, 0x00	; 0
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	4a e7       	ldi	r20, 0x7A	; 122
    1a7a:	53 e4       	ldi	r21, 0x43	; 67
    1a7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a80:	dc 01       	movw	r26, r24
    1a82:	cb 01       	movw	r24, r22
    1a84:	8b a3       	std	Y+35, r24	; 0x23
    1a86:	9c a3       	std	Y+36, r25	; 0x24
    1a88:	ad a3       	std	Y+37, r26	; 0x25
    1a8a:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1a8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a90:	8d a1       	ldd	r24, Y+37	; 0x25
    1a92:	9e a1       	ldd	r25, Y+38	; 0x26
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e8       	ldi	r20, 0x80	; 128
    1a9a:	5f e3       	ldi	r21, 0x3F	; 63
    1a9c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aa0:	88 23       	and	r24, r24
    1aa2:	2c f4       	brge	.+10     	; 0x1aae <LCD_sendCommand+0x176>
		__ticks = 1;
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	90 e0       	ldi	r25, 0x00	; 0
    1aa8:	9a a3       	std	Y+34, r25	; 0x22
    1aaa:	89 a3       	std	Y+33, r24	; 0x21
    1aac:	3f c0       	rjmp	.+126    	; 0x1b2c <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
    1aae:	6b a1       	ldd	r22, Y+35	; 0x23
    1ab0:	7c a1       	ldd	r23, Y+36	; 0x24
    1ab2:	8d a1       	ldd	r24, Y+37	; 0x25
    1ab4:	9e a1       	ldd	r25, Y+38	; 0x26
    1ab6:	20 e0       	ldi	r18, 0x00	; 0
    1ab8:	3f ef       	ldi	r19, 0xFF	; 255
    1aba:	4f e7       	ldi	r20, 0x7F	; 127
    1abc:	57 e4       	ldi	r21, 0x47	; 71
    1abe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ac2:	18 16       	cp	r1, r24
    1ac4:	4c f5       	brge	.+82     	; 0x1b18 <LCD_sendCommand+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ac6:	6f a1       	ldd	r22, Y+39	; 0x27
    1ac8:	78 a5       	ldd	r23, Y+40	; 0x28
    1aca:	89 a5       	ldd	r24, Y+41	; 0x29
    1acc:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	30 e0       	ldi	r19, 0x00	; 0
    1ad2:	40 e2       	ldi	r20, 0x20	; 32
    1ad4:	51 e4       	ldi	r21, 0x41	; 65
    1ad6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	bc 01       	movw	r22, r24
    1ae0:	cd 01       	movw	r24, r26
    1ae2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ae6:	dc 01       	movw	r26, r24
    1ae8:	cb 01       	movw	r24, r22
    1aea:	9a a3       	std	Y+34, r25	; 0x22
    1aec:	89 a3       	std	Y+33, r24	; 0x21
    1aee:	0f c0       	rjmp	.+30     	; 0x1b0e <LCD_sendCommand+0x1d6>
    1af0:	89 e1       	ldi	r24, 0x19	; 25
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	98 a3       	std	Y+32, r25	; 0x20
    1af6:	8f 8f       	std	Y+31, r24	; 0x1f
    1af8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1afa:	98 a1       	ldd	r25, Y+32	; 0x20
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	f1 f7       	brne	.-4      	; 0x1afc <LCD_sendCommand+0x1c4>
    1b00:	98 a3       	std	Y+32, r25	; 0x20
    1b02:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b04:	89 a1       	ldd	r24, Y+33	; 0x21
    1b06:	9a a1       	ldd	r25, Y+34	; 0x22
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	9a a3       	std	Y+34, r25	; 0x22
    1b0c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b0e:	89 a1       	ldd	r24, Y+33	; 0x21
    1b10:	9a a1       	ldd	r25, Y+34	; 0x22
    1b12:	00 97       	sbiw	r24, 0x00	; 0
    1b14:	69 f7       	brne	.-38     	; 0x1af0 <LCD_sendCommand+0x1b8>
    1b16:	14 c0       	rjmp	.+40     	; 0x1b40 <LCD_sendCommand+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b18:	6b a1       	ldd	r22, Y+35	; 0x23
    1b1a:	7c a1       	ldd	r23, Y+36	; 0x24
    1b1c:	8d a1       	ldd	r24, Y+37	; 0x25
    1b1e:	9e a1       	ldd	r25, Y+38	; 0x26
    1b20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b24:	dc 01       	movw	r26, r24
    1b26:	cb 01       	movw	r24, r22
    1b28:	9a a3       	std	Y+34, r25	; 0x22
    1b2a:	89 a3       	std	Y+33, r24	; 0x21
    1b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1b2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1b30:	9e 8f       	std	Y+30, r25	; 0x1e
    1b32:	8d 8f       	std	Y+29, r24	; 0x1d
    1b34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b38:	01 97       	sbiw	r24, 0x01	; 1
    1b3a:	f1 f7       	brne	.-4      	; 0x1b38 <LCD_sendCommand+0x200>
    1b3c:	9e 8f       	std	Y+30, r25	; 0x1e
    1b3e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = command; /* out the required command to the data bus D0 --> D7 */
    1b40:	e5 e3       	ldi	r30, 0x35	; 53
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	89 ad       	ldd	r24, Y+57	; 0x39
    1b46:	80 83       	st	Z, r24
    1b48:	80 e0       	ldi	r24, 0x00	; 0
    1b4a:	90 e0       	ldi	r25, 0x00	; 0
    1b4c:	a0 e8       	ldi	r26, 0x80	; 128
    1b4e:	bf e3       	ldi	r27, 0x3F	; 63
    1b50:	89 8f       	std	Y+25, r24	; 0x19
    1b52:	9a 8f       	std	Y+26, r25	; 0x1a
    1b54:	ab 8f       	std	Y+27, r26	; 0x1b
    1b56:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b58:	69 8d       	ldd	r22, Y+25	; 0x19
    1b5a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1b5c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1b5e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1b60:	20 e0       	ldi	r18, 0x00	; 0
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	4a e7       	ldi	r20, 0x7A	; 122
    1b66:	53 e4       	ldi	r21, 0x43	; 67
    1b68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b6c:	dc 01       	movw	r26, r24
    1b6e:	cb 01       	movw	r24, r22
    1b70:	8d 8b       	std	Y+21, r24	; 0x15
    1b72:	9e 8b       	std	Y+22, r25	; 0x16
    1b74:	af 8b       	std	Y+23, r26	; 0x17
    1b76:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1b78:	6d 89       	ldd	r22, Y+21	; 0x15
    1b7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1b7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1b7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1b80:	20 e0       	ldi	r18, 0x00	; 0
    1b82:	30 e0       	ldi	r19, 0x00	; 0
    1b84:	40 e8       	ldi	r20, 0x80	; 128
    1b86:	5f e3       	ldi	r21, 0x3F	; 63
    1b88:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1b8c:	88 23       	and	r24, r24
    1b8e:	2c f4       	brge	.+10     	; 0x1b9a <LCD_sendCommand+0x262>
		__ticks = 1;
    1b90:	81 e0       	ldi	r24, 0x01	; 1
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	9c 8b       	std	Y+20, r25	; 0x14
    1b96:	8b 8b       	std	Y+19, r24	; 0x13
    1b98:	3f c0       	rjmp	.+126    	; 0x1c18 <LCD_sendCommand+0x2e0>
	else if (__tmp > 65535)
    1b9a:	6d 89       	ldd	r22, Y+21	; 0x15
    1b9c:	7e 89       	ldd	r23, Y+22	; 0x16
    1b9e:	8f 89       	ldd	r24, Y+23	; 0x17
    1ba0:	98 8d       	ldd	r25, Y+24	; 0x18
    1ba2:	20 e0       	ldi	r18, 0x00	; 0
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	4f e7       	ldi	r20, 0x7F	; 127
    1ba8:	57 e4       	ldi	r21, 0x47	; 71
    1baa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bae:	18 16       	cp	r1, r24
    1bb0:	4c f5       	brge	.+82     	; 0x1c04 <LCD_sendCommand+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bb2:	69 8d       	ldd	r22, Y+25	; 0x19
    1bb4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1bb6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1bb8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1bba:	20 e0       	ldi	r18, 0x00	; 0
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	40 e2       	ldi	r20, 0x20	; 32
    1bc0:	51 e4       	ldi	r21, 0x41	; 65
    1bc2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bc6:	dc 01       	movw	r26, r24
    1bc8:	cb 01       	movw	r24, r22
    1bca:	bc 01       	movw	r22, r24
    1bcc:	cd 01       	movw	r24, r26
    1bce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bd2:	dc 01       	movw	r26, r24
    1bd4:	cb 01       	movw	r24, r22
    1bd6:	9c 8b       	std	Y+20, r25	; 0x14
    1bd8:	8b 8b       	std	Y+19, r24	; 0x13
    1bda:	0f c0       	rjmp	.+30     	; 0x1bfa <LCD_sendCommand+0x2c2>
    1bdc:	89 e1       	ldi	r24, 0x19	; 25
    1bde:	90 e0       	ldi	r25, 0x00	; 0
    1be0:	9a 8b       	std	Y+18, r25	; 0x12
    1be2:	89 8b       	std	Y+17, r24	; 0x11
    1be4:	89 89       	ldd	r24, Y+17	; 0x11
    1be6:	9a 89       	ldd	r25, Y+18	; 0x12
    1be8:	01 97       	sbiw	r24, 0x01	; 1
    1bea:	f1 f7       	brne	.-4      	; 0x1be8 <LCD_sendCommand+0x2b0>
    1bec:	9a 8b       	std	Y+18, r25	; 0x12
    1bee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bf0:	8b 89       	ldd	r24, Y+19	; 0x13
    1bf2:	9c 89       	ldd	r25, Y+20	; 0x14
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	9c 8b       	std	Y+20, r25	; 0x14
    1bf8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bfa:	8b 89       	ldd	r24, Y+19	; 0x13
    1bfc:	9c 89       	ldd	r25, Y+20	; 0x14
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	69 f7       	brne	.-38     	; 0x1bdc <LCD_sendCommand+0x2a4>
    1c02:	14 c0       	rjmp	.+40     	; 0x1c2c <LCD_sendCommand+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c04:	6d 89       	ldd	r22, Y+21	; 0x15
    1c06:	7e 89       	ldd	r23, Y+22	; 0x16
    1c08:	8f 89       	ldd	r24, Y+23	; 0x17
    1c0a:	98 8d       	ldd	r25, Y+24	; 0x18
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9c 8b       	std	Y+20, r25	; 0x14
    1c16:	8b 8b       	std	Y+19, r24	; 0x13
    1c18:	8b 89       	ldd	r24, Y+19	; 0x13
    1c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    1c1c:	98 8b       	std	Y+16, r25	; 0x10
    1c1e:	8f 87       	std	Y+15, r24	; 0x0f
    1c20:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c22:	98 89       	ldd	r25, Y+16	; 0x10
    1c24:	01 97       	sbiw	r24, 0x01	; 1
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <LCD_sendCommand+0x2ec>
    1c28:	98 8b       	std	Y+16, r25	; 0x10
    1c2a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    1c2c:	a2 e3       	ldi	r26, 0x32	; 50
    1c2e:	b0 e0       	ldi	r27, 0x00	; 0
    1c30:	e2 e3       	ldi	r30, 0x32	; 50
    1c32:	f0 e0       	ldi	r31, 0x00	; 0
    1c34:	80 81       	ld	r24, Z
    1c36:	8f 7b       	andi	r24, 0xBF	; 191
    1c38:	8c 93       	st	X, r24
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a0 e8       	ldi	r26, 0x80	; 128
    1c40:	bf e3       	ldi	r27, 0x3F	; 63
    1c42:	8b 87       	std	Y+11, r24	; 0x0b
    1c44:	9c 87       	std	Y+12, r25	; 0x0c
    1c46:	ad 87       	std	Y+13, r26	; 0x0d
    1c48:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c4c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c4e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c50:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a e7       	ldi	r20, 0x7A	; 122
    1c58:	53 e4       	ldi	r21, 0x43	; 67
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8f 83       	std	Y+7, r24	; 0x07
    1c64:	98 87       	std	Y+8, r25	; 0x08
    1c66:	a9 87       	std	Y+9, r26	; 0x09
    1c68:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1c6c:	78 85       	ldd	r23, Y+8	; 0x08
    1c6e:	89 85       	ldd	r24, Y+9	; 0x09
    1c70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <LCD_sendCommand+0x354>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9e 83       	std	Y+6, r25	; 0x06
    1c88:	8d 83       	std	Y+5, r24	; 0x05
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <LCD_sendCommand+0x3d2>
	else if (__tmp > 65535)
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <LCD_sendCommand+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ca6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1caa:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9e 83       	std	Y+6, r25	; 0x06
    1cca:	8d 83       	std	Y+5, r24	; 0x05
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <LCD_sendCommand+0x3b4>
    1cce:	89 e1       	ldi	r24, 0x19	; 25
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9c 83       	std	Y+4, r25	; 0x04
    1cd4:	8b 83       	std	Y+3, r24	; 0x03
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD_sendCommand+0x3a2>
    1cde:	9c 83       	std	Y+4, r25	; 0x04
    1ce0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ce4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <LCD_sendCommand+0x396>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <LCD_sendCommand+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6f 81       	ldd	r22, Y+7	; 0x07
    1cf8:	78 85       	ldd	r23, Y+8	; 0x08
    1cfa:	89 85       	ldd	r24, Y+9	; 0x09
    1cfc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9e 83       	std	Y+6, r25	; 0x06
    1d08:	8d 83       	std	Y+5, r24	; 0x05
    1d0a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d0c:	9e 81       	ldd	r25, Y+6	; 0x06
    1d0e:	9a 83       	std	Y+2, r25	; 0x02
    1d10:	89 83       	std	Y+1, r24	; 0x01
    1d12:	89 81       	ldd	r24, Y+1	; 0x01
    1d14:	9a 81       	ldd	r25, Y+2	; 0x02
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD_sendCommand+0x3de>
    1d1a:	9a 83       	std	Y+2, r25	; 0x02
    1d1c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    1d1e:	e9 96       	adiw	r28, 0x39	; 57
    1d20:	0f b6       	in	r0, 0x3f	; 63
    1d22:	f8 94       	cli
    1d24:	de bf       	out	0x3e, r29	; 62
    1d26:	0f be       	out	0x3f, r0	; 63
    1d28:	cd bf       	out	0x3d, r28	; 61
    1d2a:	cf 91       	pop	r28
    1d2c:	df 91       	pop	r29
    1d2e:	08 95       	ret

00001d30 <LCD_displayCharacter>:

void LCD_displayCharacter(uint8 data)
{
    1d30:	df 93       	push	r29
    1d32:	cf 93       	push	r28
    1d34:	cd b7       	in	r28, 0x3d	; 61
    1d36:	de b7       	in	r29, 0x3e	; 62
    1d38:	e9 97       	sbiw	r28, 0x39	; 57
    1d3a:	0f b6       	in	r0, 0x3f	; 63
    1d3c:	f8 94       	cli
    1d3e:	de bf       	out	0x3e, r29	; 62
    1d40:	0f be       	out	0x3f, r0	; 63
    1d42:	cd bf       	out	0x3d, r28	; 61
    1d44:	89 af       	std	Y+57, r24	; 0x39
	SET_BIT(LCD_CTRL_PORT,RS); /* Data Mode RS=1 */
    1d46:	a2 e3       	ldi	r26, 0x32	; 50
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e2 e3       	ldi	r30, 0x32	; 50
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	80 61       	ori	r24, 0x10	; 16
    1d52:	8c 93       	st	X, r24
	CLEAR_BIT(LCD_CTRL_PORT,RW); /* write data to LCD so RW=0 */
    1d54:	a2 e3       	ldi	r26, 0x32	; 50
    1d56:	b0 e0       	ldi	r27, 0x00	; 0
    1d58:	e2 e3       	ldi	r30, 0x32	; 50
    1d5a:	f0 e0       	ldi	r31, 0x00	; 0
    1d5c:	80 81       	ld	r24, Z
    1d5e:	8f 7d       	andi	r24, 0xDF	; 223
    1d60:	8c 93       	st	X, r24
    1d62:	80 e0       	ldi	r24, 0x00	; 0
    1d64:	90 e0       	ldi	r25, 0x00	; 0
    1d66:	a0 e8       	ldi	r26, 0x80	; 128
    1d68:	bf e3       	ldi	r27, 0x3F	; 63
    1d6a:	8d ab       	std	Y+53, r24	; 0x35
    1d6c:	9e ab       	std	Y+54, r25	; 0x36
    1d6e:	af ab       	std	Y+55, r26	; 0x37
    1d70:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d72:	6d a9       	ldd	r22, Y+53	; 0x35
    1d74:	7e a9       	ldd	r23, Y+54	; 0x36
    1d76:	8f a9       	ldd	r24, Y+55	; 0x37
    1d78:	98 ad       	ldd	r25, Y+56	; 0x38
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	4a e7       	ldi	r20, 0x7A	; 122
    1d80:	53 e4       	ldi	r21, 0x43	; 67
    1d82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d86:	dc 01       	movw	r26, r24
    1d88:	cb 01       	movw	r24, r22
    1d8a:	89 ab       	std	Y+49, r24	; 0x31
    1d8c:	9a ab       	std	Y+50, r25	; 0x32
    1d8e:	ab ab       	std	Y+51, r26	; 0x33
    1d90:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1d92:	69 a9       	ldd	r22, Y+49	; 0x31
    1d94:	7a a9       	ldd	r23, Y+50	; 0x32
    1d96:	8b a9       	ldd	r24, Y+51	; 0x33
    1d98:	9c a9       	ldd	r25, Y+52	; 0x34
    1d9a:	20 e0       	ldi	r18, 0x00	; 0
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	40 e8       	ldi	r20, 0x80	; 128
    1da0:	5f e3       	ldi	r21, 0x3F	; 63
    1da2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1da6:	88 23       	and	r24, r24
    1da8:	2c f4       	brge	.+10     	; 0x1db4 <LCD_displayCharacter+0x84>
		__ticks = 1;
    1daa:	81 e0       	ldi	r24, 0x01	; 1
    1dac:	90 e0       	ldi	r25, 0x00	; 0
    1dae:	98 ab       	std	Y+48, r25	; 0x30
    1db0:	8f a7       	std	Y+47, r24	; 0x2f
    1db2:	3f c0       	rjmp	.+126    	; 0x1e32 <LCD_displayCharacter+0x102>
	else if (__tmp > 65535)
    1db4:	69 a9       	ldd	r22, Y+49	; 0x31
    1db6:	7a a9       	ldd	r23, Y+50	; 0x32
    1db8:	8b a9       	ldd	r24, Y+51	; 0x33
    1dba:	9c a9       	ldd	r25, Y+52	; 0x34
    1dbc:	20 e0       	ldi	r18, 0x00	; 0
    1dbe:	3f ef       	ldi	r19, 0xFF	; 255
    1dc0:	4f e7       	ldi	r20, 0x7F	; 127
    1dc2:	57 e4       	ldi	r21, 0x47	; 71
    1dc4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1dc8:	18 16       	cp	r1, r24
    1dca:	4c f5       	brge	.+82     	; 0x1e1e <LCD_displayCharacter+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dcc:	6d a9       	ldd	r22, Y+53	; 0x35
    1dce:	7e a9       	ldd	r23, Y+54	; 0x36
    1dd0:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd2:	98 ad       	ldd	r25, Y+56	; 0x38
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	40 e2       	ldi	r20, 0x20	; 32
    1dda:	51 e4       	ldi	r21, 0x41	; 65
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	bc 01       	movw	r22, r24
    1de6:	cd 01       	movw	r24, r26
    1de8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dec:	dc 01       	movw	r26, r24
    1dee:	cb 01       	movw	r24, r22
    1df0:	98 ab       	std	Y+48, r25	; 0x30
    1df2:	8f a7       	std	Y+47, r24	; 0x2f
    1df4:	0f c0       	rjmp	.+30     	; 0x1e14 <LCD_displayCharacter+0xe4>
    1df6:	89 e1       	ldi	r24, 0x19	; 25
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9e a7       	std	Y+46, r25	; 0x2e
    1dfc:	8d a7       	std	Y+45, r24	; 0x2d
    1dfe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e00:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e02:	01 97       	sbiw	r24, 0x01	; 1
    1e04:	f1 f7       	brne	.-4      	; 0x1e02 <LCD_displayCharacter+0xd2>
    1e06:	9e a7       	std	Y+46, r25	; 0x2e
    1e08:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e0a:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e0c:	98 a9       	ldd	r25, Y+48	; 0x30
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	98 ab       	std	Y+48, r25	; 0x30
    1e12:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e14:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e16:	98 a9       	ldd	r25, Y+48	; 0x30
    1e18:	00 97       	sbiw	r24, 0x00	; 0
    1e1a:	69 f7       	brne	.-38     	; 0x1df6 <LCD_displayCharacter+0xc6>
    1e1c:	14 c0       	rjmp	.+40     	; 0x1e46 <LCD_displayCharacter+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e1e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e20:	7a a9       	ldd	r23, Y+50	; 0x32
    1e22:	8b a9       	ldd	r24, Y+51	; 0x33
    1e24:	9c a9       	ldd	r25, Y+52	; 0x34
    1e26:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	98 ab       	std	Y+48, r25	; 0x30
    1e30:	8f a7       	std	Y+47, r24	; 0x2f
    1e32:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e34:	98 a9       	ldd	r25, Y+48	; 0x30
    1e36:	9c a7       	std	Y+44, r25	; 0x2c
    1e38:	8b a7       	std	Y+43, r24	; 0x2b
    1e3a:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e3c:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e3e:	01 97       	sbiw	r24, 0x01	; 1
    1e40:	f1 f7       	brne	.-4      	; 0x1e3e <LCD_displayCharacter+0x10e>
    1e42:	9c a7       	std	Y+44, r25	; 0x2c
    1e44:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	SET_BIT(LCD_CTRL_PORT,E); /* Enable LCD E=1 */
    1e46:	a2 e3       	ldi	r26, 0x32	; 50
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e2 e3       	ldi	r30, 0x32	; 50
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 64       	ori	r24, 0x40	; 64
    1e52:	8c 93       	st	X, r24
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	a0 e8       	ldi	r26, 0x80	; 128
    1e5a:	bf e3       	ldi	r27, 0x3F	; 63
    1e5c:	8f a3       	std	Y+39, r24	; 0x27
    1e5e:	98 a7       	std	Y+40, r25	; 0x28
    1e60:	a9 a7       	std	Y+41, r26	; 0x29
    1e62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e64:	6f a1       	ldd	r22, Y+39	; 0x27
    1e66:	78 a5       	ldd	r23, Y+40	; 0x28
    1e68:	89 a5       	ldd	r24, Y+41	; 0x29
    1e6a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1e6c:	20 e0       	ldi	r18, 0x00	; 0
    1e6e:	30 e0       	ldi	r19, 0x00	; 0
    1e70:	4a e7       	ldi	r20, 0x7A	; 122
    1e72:	53 e4       	ldi	r21, 0x43	; 67
    1e74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e78:	dc 01       	movw	r26, r24
    1e7a:	cb 01       	movw	r24, r22
    1e7c:	8b a3       	std	Y+35, r24	; 0x23
    1e7e:	9c a3       	std	Y+36, r25	; 0x24
    1e80:	ad a3       	std	Y+37, r26	; 0x25
    1e82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1e84:	6b a1       	ldd	r22, Y+35	; 0x23
    1e86:	7c a1       	ldd	r23, Y+36	; 0x24
    1e88:	8d a1       	ldd	r24, Y+37	; 0x25
    1e8a:	9e a1       	ldd	r25, Y+38	; 0x26
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	40 e8       	ldi	r20, 0x80	; 128
    1e92:	5f e3       	ldi	r21, 0x3F	; 63
    1e94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e98:	88 23       	and	r24, r24
    1e9a:	2c f4       	brge	.+10     	; 0x1ea6 <LCD_displayCharacter+0x176>
		__ticks = 1;
    1e9c:	81 e0       	ldi	r24, 0x01	; 1
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	9a a3       	std	Y+34, r25	; 0x22
    1ea2:	89 a3       	std	Y+33, r24	; 0x21
    1ea4:	3f c0       	rjmp	.+126    	; 0x1f24 <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    1ea6:	6b a1       	ldd	r22, Y+35	; 0x23
    1ea8:	7c a1       	ldd	r23, Y+36	; 0x24
    1eaa:	8d a1       	ldd	r24, Y+37	; 0x25
    1eac:	9e a1       	ldd	r25, Y+38	; 0x26
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	3f ef       	ldi	r19, 0xFF	; 255
    1eb2:	4f e7       	ldi	r20, 0x7F	; 127
    1eb4:	57 e4       	ldi	r21, 0x47	; 71
    1eb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1eba:	18 16       	cp	r1, r24
    1ebc:	4c f5       	brge	.+82     	; 0x1f10 <LCD_displayCharacter+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ebe:	6f a1       	ldd	r22, Y+39	; 0x27
    1ec0:	78 a5       	ldd	r23, Y+40	; 0x28
    1ec2:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec6:	20 e0       	ldi	r18, 0x00	; 0
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	40 e2       	ldi	r20, 0x20	; 32
    1ecc:	51 e4       	ldi	r21, 0x41	; 65
    1ece:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ed2:	dc 01       	movw	r26, r24
    1ed4:	cb 01       	movw	r24, r22
    1ed6:	bc 01       	movw	r22, r24
    1ed8:	cd 01       	movw	r24, r26
    1eda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ede:	dc 01       	movw	r26, r24
    1ee0:	cb 01       	movw	r24, r22
    1ee2:	9a a3       	std	Y+34, r25	; 0x22
    1ee4:	89 a3       	std	Y+33, r24	; 0x21
    1ee6:	0f c0       	rjmp	.+30     	; 0x1f06 <LCD_displayCharacter+0x1d6>
    1ee8:	89 e1       	ldi	r24, 0x19	; 25
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	98 a3       	std	Y+32, r25	; 0x20
    1eee:	8f 8f       	std	Y+31, r24	; 0x1f
    1ef0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ef2:	98 a1       	ldd	r25, Y+32	; 0x20
    1ef4:	01 97       	sbiw	r24, 0x01	; 1
    1ef6:	f1 f7       	brne	.-4      	; 0x1ef4 <LCD_displayCharacter+0x1c4>
    1ef8:	98 a3       	std	Y+32, r25	; 0x20
    1efa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1efc:	89 a1       	ldd	r24, Y+33	; 0x21
    1efe:	9a a1       	ldd	r25, Y+34	; 0x22
    1f00:	01 97       	sbiw	r24, 0x01	; 1
    1f02:	9a a3       	std	Y+34, r25	; 0x22
    1f04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f06:	89 a1       	ldd	r24, Y+33	; 0x21
    1f08:	9a a1       	ldd	r25, Y+34	; 0x22
    1f0a:	00 97       	sbiw	r24, 0x00	; 0
    1f0c:	69 f7       	brne	.-38     	; 0x1ee8 <LCD_displayCharacter+0x1b8>
    1f0e:	14 c0       	rjmp	.+40     	; 0x1f38 <LCD_displayCharacter+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f10:	6b a1       	ldd	r22, Y+35	; 0x23
    1f12:	7c a1       	ldd	r23, Y+36	; 0x24
    1f14:	8d a1       	ldd	r24, Y+37	; 0x25
    1f16:	9e a1       	ldd	r25, Y+38	; 0x26
    1f18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f1c:	dc 01       	movw	r26, r24
    1f1e:	cb 01       	movw	r24, r22
    1f20:	9a a3       	std	Y+34, r25	; 0x22
    1f22:	89 a3       	std	Y+33, r24	; 0x21
    1f24:	89 a1       	ldd	r24, Y+33	; 0x21
    1f26:	9a a1       	ldd	r25, Y+34	; 0x22
    1f28:	9e 8f       	std	Y+30, r25	; 0x1e
    1f2a:	8d 8f       	std	Y+29, r24	; 0x1d
    1f2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f30:	01 97       	sbiw	r24, 0x01	; 1
    1f32:	f1 f7       	brne	.-4      	; 0x1f30 <LCD_displayCharacter+0x200>
    1f34:	9e 8f       	std	Y+30, r25	; 0x1e
    1f36:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	LCD_DATA_PORT = data; /* out the required data char to the data bus D0 --> D7 */
    1f38:	e5 e3       	ldi	r30, 0x35	; 53
    1f3a:	f0 e0       	ldi	r31, 0x00	; 0
    1f3c:	89 ad       	ldd	r24, Y+57	; 0x39
    1f3e:	80 83       	st	Z, r24
    1f40:	80 e0       	ldi	r24, 0x00	; 0
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	a0 e8       	ldi	r26, 0x80	; 128
    1f46:	bf e3       	ldi	r27, 0x3F	; 63
    1f48:	89 8f       	std	Y+25, r24	; 0x19
    1f4a:	9a 8f       	std	Y+26, r25	; 0x1a
    1f4c:	ab 8f       	std	Y+27, r26	; 0x1b
    1f4e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f50:	69 8d       	ldd	r22, Y+25	; 0x19
    1f52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	4a e7       	ldi	r20, 0x7A	; 122
    1f5e:	53 e4       	ldi	r21, 0x43	; 67
    1f60:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	8d 8b       	std	Y+21, r24	; 0x15
    1f6a:	9e 8b       	std	Y+22, r25	; 0x16
    1f6c:	af 8b       	std	Y+23, r26	; 0x17
    1f6e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f70:	6d 89       	ldd	r22, Y+21	; 0x15
    1f72:	7e 89       	ldd	r23, Y+22	; 0x16
    1f74:	8f 89       	ldd	r24, Y+23	; 0x17
    1f76:	98 8d       	ldd	r25, Y+24	; 0x18
    1f78:	20 e0       	ldi	r18, 0x00	; 0
    1f7a:	30 e0       	ldi	r19, 0x00	; 0
    1f7c:	40 e8       	ldi	r20, 0x80	; 128
    1f7e:	5f e3       	ldi	r21, 0x3F	; 63
    1f80:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f84:	88 23       	and	r24, r24
    1f86:	2c f4       	brge	.+10     	; 0x1f92 <LCD_displayCharacter+0x262>
		__ticks = 1;
    1f88:	81 e0       	ldi	r24, 0x01	; 1
    1f8a:	90 e0       	ldi	r25, 0x00	; 0
    1f8c:	9c 8b       	std	Y+20, r25	; 0x14
    1f8e:	8b 8b       	std	Y+19, r24	; 0x13
    1f90:	3f c0       	rjmp	.+126    	; 0x2010 <LCD_displayCharacter+0x2e0>
	else if (__tmp > 65535)
    1f92:	6d 89       	ldd	r22, Y+21	; 0x15
    1f94:	7e 89       	ldd	r23, Y+22	; 0x16
    1f96:	8f 89       	ldd	r24, Y+23	; 0x17
    1f98:	98 8d       	ldd	r25, Y+24	; 0x18
    1f9a:	20 e0       	ldi	r18, 0x00	; 0
    1f9c:	3f ef       	ldi	r19, 0xFF	; 255
    1f9e:	4f e7       	ldi	r20, 0x7F	; 127
    1fa0:	57 e4       	ldi	r21, 0x47	; 71
    1fa2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1fa6:	18 16       	cp	r1, r24
    1fa8:	4c f5       	brge	.+82     	; 0x1ffc <LCD_displayCharacter+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1faa:	69 8d       	ldd	r22, Y+25	; 0x19
    1fac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fb0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fb2:	20 e0       	ldi	r18, 0x00	; 0
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	40 e2       	ldi	r20, 0x20	; 32
    1fb8:	51 e4       	ldi	r21, 0x41	; 65
    1fba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fbe:	dc 01       	movw	r26, r24
    1fc0:	cb 01       	movw	r24, r22
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	cd 01       	movw	r24, r26
    1fc6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fca:	dc 01       	movw	r26, r24
    1fcc:	cb 01       	movw	r24, r22
    1fce:	9c 8b       	std	Y+20, r25	; 0x14
    1fd0:	8b 8b       	std	Y+19, r24	; 0x13
    1fd2:	0f c0       	rjmp	.+30     	; 0x1ff2 <LCD_displayCharacter+0x2c2>
    1fd4:	89 e1       	ldi	r24, 0x19	; 25
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	9a 8b       	std	Y+18, r25	; 0x12
    1fda:	89 8b       	std	Y+17, r24	; 0x11
    1fdc:	89 89       	ldd	r24, Y+17	; 0x11
    1fde:	9a 89       	ldd	r25, Y+18	; 0x12
    1fe0:	01 97       	sbiw	r24, 0x01	; 1
    1fe2:	f1 f7       	brne	.-4      	; 0x1fe0 <LCD_displayCharacter+0x2b0>
    1fe4:	9a 8b       	std	Y+18, r25	; 0x12
    1fe6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe8:	8b 89       	ldd	r24, Y+19	; 0x13
    1fea:	9c 89       	ldd	r25, Y+20	; 0x14
    1fec:	01 97       	sbiw	r24, 0x01	; 1
    1fee:	9c 8b       	std	Y+20, r25	; 0x14
    1ff0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ff4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ff6:	00 97       	sbiw	r24, 0x00	; 0
    1ff8:	69 f7       	brne	.-38     	; 0x1fd4 <LCD_displayCharacter+0x2a4>
    1ffa:	14 c0       	rjmp	.+40     	; 0x2024 <LCD_displayCharacter+0x2f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    2000:	8f 89       	ldd	r24, Y+23	; 0x17
    2002:	98 8d       	ldd	r25, Y+24	; 0x18
    2004:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2008:	dc 01       	movw	r26, r24
    200a:	cb 01       	movw	r24, r22
    200c:	9c 8b       	std	Y+20, r25	; 0x14
    200e:	8b 8b       	std	Y+19, r24	; 0x13
    2010:	8b 89       	ldd	r24, Y+19	; 0x13
    2012:	9c 89       	ldd	r25, Y+20	; 0x14
    2014:	98 8b       	std	Y+16, r25	; 0x10
    2016:	8f 87       	std	Y+15, r24	; 0x0f
    2018:	8f 85       	ldd	r24, Y+15	; 0x0f
    201a:	98 89       	ldd	r25, Y+16	; 0x10
    201c:	01 97       	sbiw	r24, 0x01	; 1
    201e:	f1 f7       	brne	.-4      	; 0x201c <LCD_displayCharacter+0x2ec>
    2020:	98 8b       	std	Y+16, r25	; 0x10
    2022:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	CLEAR_BIT(LCD_CTRL_PORT,E); /* disable LCD E=0 */
    2024:	a2 e3       	ldi	r26, 0x32	; 50
    2026:	b0 e0       	ldi	r27, 0x00	; 0
    2028:	e2 e3       	ldi	r30, 0x32	; 50
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	8f 7b       	andi	r24, 0xBF	; 191
    2030:	8c 93       	st	X, r24
    2032:	80 e0       	ldi	r24, 0x00	; 0
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	a0 e8       	ldi	r26, 0x80	; 128
    2038:	bf e3       	ldi	r27, 0x3F	; 63
    203a:	8b 87       	std	Y+11, r24	; 0x0b
    203c:	9c 87       	std	Y+12, r25	; 0x0c
    203e:	ad 87       	std	Y+13, r26	; 0x0d
    2040:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2042:	6b 85       	ldd	r22, Y+11	; 0x0b
    2044:	7c 85       	ldd	r23, Y+12	; 0x0c
    2046:	8d 85       	ldd	r24, Y+13	; 0x0d
    2048:	9e 85       	ldd	r25, Y+14	; 0x0e
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	4a e7       	ldi	r20, 0x7A	; 122
    2050:	53 e4       	ldi	r21, 0x43	; 67
    2052:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	8f 83       	std	Y+7, r24	; 0x07
    205c:	98 87       	std	Y+8, r25	; 0x08
    205e:	a9 87       	std	Y+9, r26	; 0x09
    2060:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2062:	6f 81       	ldd	r22, Y+7	; 0x07
    2064:	78 85       	ldd	r23, Y+8	; 0x08
    2066:	89 85       	ldd	r24, Y+9	; 0x09
    2068:	9a 85       	ldd	r25, Y+10	; 0x0a
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e8       	ldi	r20, 0x80	; 128
    2070:	5f e3       	ldi	r21, 0x3F	; 63
    2072:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2076:	88 23       	and	r24, r24
    2078:	2c f4       	brge	.+10     	; 0x2084 <LCD_displayCharacter+0x354>
		__ticks = 1;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	9e 83       	std	Y+6, r25	; 0x06
    2080:	8d 83       	std	Y+5, r24	; 0x05
    2082:	3f c0       	rjmp	.+126    	; 0x2102 <LCD_displayCharacter+0x3d2>
	else if (__tmp > 65535)
    2084:	6f 81       	ldd	r22, Y+7	; 0x07
    2086:	78 85       	ldd	r23, Y+8	; 0x08
    2088:	89 85       	ldd	r24, Y+9	; 0x09
    208a:	9a 85       	ldd	r25, Y+10	; 0x0a
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	3f ef       	ldi	r19, 0xFF	; 255
    2090:	4f e7       	ldi	r20, 0x7F	; 127
    2092:	57 e4       	ldi	r21, 0x47	; 71
    2094:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2098:	18 16       	cp	r1, r24
    209a:	4c f5       	brge	.+82     	; 0x20ee <LCD_displayCharacter+0x3be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209c:	6b 85       	ldd	r22, Y+11	; 0x0b
    209e:	7c 85       	ldd	r23, Y+12	; 0x0c
    20a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    20a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e2       	ldi	r20, 0x20	; 32
    20aa:	51 e4       	ldi	r21, 0x41	; 65
    20ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	9e 83       	std	Y+6, r25	; 0x06
    20c2:	8d 83       	std	Y+5, r24	; 0x05
    20c4:	0f c0       	rjmp	.+30     	; 0x20e4 <LCD_displayCharacter+0x3b4>
    20c6:	89 e1       	ldi	r24, 0x19	; 25
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9c 83       	std	Y+4, r25	; 0x04
    20cc:	8b 83       	std	Y+3, r24	; 0x03
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <LCD_displayCharacter+0x3a2>
    20d6:	9c 83       	std	Y+4, r25	; 0x04
    20d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20da:	8d 81       	ldd	r24, Y+5	; 0x05
    20dc:	9e 81       	ldd	r25, Y+6	; 0x06
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	9e 83       	std	Y+6, r25	; 0x06
    20e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e4:	8d 81       	ldd	r24, Y+5	; 0x05
    20e6:	9e 81       	ldd	r25, Y+6	; 0x06
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	69 f7       	brne	.-38     	; 0x20c6 <LCD_displayCharacter+0x396>
    20ec:	14 c0       	rjmp	.+40     	; 0x2116 <LCD_displayCharacter+0x3e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	9e 83       	std	Y+6, r25	; 0x06
    2100:	8d 83       	std	Y+5, r24	; 0x05
    2102:	8d 81       	ldd	r24, Y+5	; 0x05
    2104:	9e 81       	ldd	r25, Y+6	; 0x06
    2106:	9a 83       	std	Y+2, r25	; 0x02
    2108:	89 83       	std	Y+1, r24	; 0x01
    210a:	89 81       	ldd	r24, Y+1	; 0x01
    210c:	9a 81       	ldd	r25, Y+2	; 0x02
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <LCD_displayCharacter+0x3de>
    2112:	9a 83       	std	Y+2, r25	; 0x02
    2114:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */	
}
    2116:	e9 96       	adiw	r28, 0x39	; 57
    2118:	0f b6       	in	r0, 0x3f	; 63
    211a:	f8 94       	cli
    211c:	de bf       	out	0x3e, r29	; 62
    211e:	0f be       	out	0x3f, r0	; 63
    2120:	cd bf       	out	0x3d, r28	; 61
    2122:	cf 91       	pop	r28
    2124:	df 91       	pop	r29
    2126:	08 95       	ret

00002128 <LCD_displayString>:

void LCD_displayString(const char *Str)
{
    2128:	df 93       	push	r29
    212a:	cf 93       	push	r28
    212c:	00 d0       	rcall	.+0      	; 0x212e <LCD_displayString+0x6>
    212e:	0f 92       	push	r0
    2130:	cd b7       	in	r28, 0x3d	; 61
    2132:	de b7       	in	r29, 0x3e	; 62
    2134:	9b 83       	std	Y+3, r25	; 0x03
    2136:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2138:	19 82       	std	Y+1, r1	; 0x01
    213a:	0e c0       	rjmp	.+28     	; 0x2158 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    213c:	89 81       	ldd	r24, Y+1	; 0x01
    213e:	28 2f       	mov	r18, r24
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	8a 81       	ldd	r24, Y+2	; 0x02
    2144:	9b 81       	ldd	r25, Y+3	; 0x03
    2146:	fc 01       	movw	r30, r24
    2148:	e2 0f       	add	r30, r18
    214a:	f3 1f       	adc	r31, r19
    214c:	80 81       	ld	r24, Z
    214e:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <LCD_displayCharacter>
		i++;
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	8f 5f       	subi	r24, 0xFF	; 255
    2156:	89 83       	std	Y+1, r24	; 0x01
}

void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2158:	89 81       	ldd	r24, Y+1	; 0x01
    215a:	28 2f       	mov	r18, r24
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	8a 81       	ldd	r24, Y+2	; 0x02
    2160:	9b 81       	ldd	r25, Y+3	; 0x03
    2162:	fc 01       	movw	r30, r24
    2164:	e2 0f       	add	r30, r18
    2166:	f3 1f       	adc	r31, r19
    2168:	80 81       	ld	r24, Z
    216a:	88 23       	and	r24, r24
    216c:	39 f7       	brne	.-50     	; 0x213c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    216e:	0f 90       	pop	r0
    2170:	0f 90       	pop	r0
    2172:	0f 90       	pop	r0
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <LCD_goToRowColumn>:

void LCD_goToRowColumn(uint8 row,uint8 col)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	00 d0       	rcall	.+0      	; 0x2180 <LCD_goToRowColumn+0x6>
    2180:	00 d0       	rcall	.+0      	; 0x2182 <LCD_goToRowColumn+0x8>
    2182:	0f 92       	push	r0
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
    2188:	8a 83       	std	Y+2, r24	; 0x02
    218a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 Address;
	
	/* first of all calculate the required address */
	switch(row)
    218c:	8a 81       	ldd	r24, Y+2	; 0x02
    218e:	28 2f       	mov	r18, r24
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	3d 83       	std	Y+5, r19	; 0x05
    2194:	2c 83       	std	Y+4, r18	; 0x04
    2196:	8c 81       	ldd	r24, Y+4	; 0x04
    2198:	9d 81       	ldd	r25, Y+5	; 0x05
    219a:	81 30       	cpi	r24, 0x01	; 1
    219c:	91 05       	cpc	r25, r1
    219e:	c1 f0       	breq	.+48     	; 0x21d0 <LCD_goToRowColumn+0x56>
    21a0:	2c 81       	ldd	r18, Y+4	; 0x04
    21a2:	3d 81       	ldd	r19, Y+5	; 0x05
    21a4:	22 30       	cpi	r18, 0x02	; 2
    21a6:	31 05       	cpc	r19, r1
    21a8:	2c f4       	brge	.+10     	; 0x21b4 <LCD_goToRowColumn+0x3a>
    21aa:	8c 81       	ldd	r24, Y+4	; 0x04
    21ac:	9d 81       	ldd	r25, Y+5	; 0x05
    21ae:	00 97       	sbiw	r24, 0x00	; 0
    21b0:	61 f0       	breq	.+24     	; 0x21ca <LCD_goToRowColumn+0x50>
    21b2:	19 c0       	rjmp	.+50     	; 0x21e6 <LCD_goToRowColumn+0x6c>
    21b4:	2c 81       	ldd	r18, Y+4	; 0x04
    21b6:	3d 81       	ldd	r19, Y+5	; 0x05
    21b8:	22 30       	cpi	r18, 0x02	; 2
    21ba:	31 05       	cpc	r19, r1
    21bc:	69 f0       	breq	.+26     	; 0x21d8 <LCD_goToRowColumn+0x5e>
    21be:	8c 81       	ldd	r24, Y+4	; 0x04
    21c0:	9d 81       	ldd	r25, Y+5	; 0x05
    21c2:	83 30       	cpi	r24, 0x03	; 3
    21c4:	91 05       	cpc	r25, r1
    21c6:	61 f0       	breq	.+24     	; 0x21e0 <LCD_goToRowColumn+0x66>
    21c8:	0e c0       	rjmp	.+28     	; 0x21e6 <LCD_goToRowColumn+0x6c>
	{
		case 0:
				Address=col;
    21ca:	8b 81       	ldd	r24, Y+3	; 0x03
    21cc:	89 83       	std	Y+1, r24	; 0x01
    21ce:	0b c0       	rjmp	.+22     	; 0x21e6 <LCD_goToRowColumn+0x6c>
				break;
		case 1:
				Address=col+0x40;
    21d0:	8b 81       	ldd	r24, Y+3	; 0x03
    21d2:	80 5c       	subi	r24, 0xC0	; 192
    21d4:	89 83       	std	Y+1, r24	; 0x01
    21d6:	07 c0       	rjmp	.+14     	; 0x21e6 <LCD_goToRowColumn+0x6c>
				break;
		case 2:
				Address=col+0x10;
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	80 5f       	subi	r24, 0xF0	; 240
    21dc:	89 83       	std	Y+1, r24	; 0x01
    21de:	03 c0       	rjmp	.+6      	; 0x21e6 <LCD_goToRowColumn+0x6c>
				break;
		case 3:
				Address=col+0x50;
    21e0:	8b 81       	ldd	r24, Y+3	; 0x03
    21e2:	80 5b       	subi	r24, 0xB0	; 176
    21e4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* to write to a specific address in the LCD 
	 * we need to apply the corresponding command 0b10000000+Address */
	LCD_sendCommand(Address | SET_CURSOR_LOCATION); 
    21e6:	89 81       	ldd	r24, Y+1	; 0x01
    21e8:	80 68       	ori	r24, 0x80	; 128
    21ea:	0e 94 9c 0c 	call	0x1938	; 0x1938 <LCD_sendCommand>
}
    21ee:	0f 90       	pop	r0
    21f0:	0f 90       	pop	r0
    21f2:	0f 90       	pop	r0
    21f4:	0f 90       	pop	r0
    21f6:	0f 90       	pop	r0
    21f8:	cf 91       	pop	r28
    21fa:	df 91       	pop	r29
    21fc:	08 95       	ret

000021fe <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    21fe:	df 93       	push	r29
    2200:	cf 93       	push	r28
    2202:	00 d0       	rcall	.+0      	; 0x2204 <LCD_displayStringRowColumn+0x6>
    2204:	00 d0       	rcall	.+0      	; 0x2206 <LCD_displayStringRowColumn+0x8>
    2206:	cd b7       	in	r28, 0x3d	; 61
    2208:	de b7       	in	r29, 0x3e	; 62
    220a:	89 83       	std	Y+1, r24	; 0x01
    220c:	6a 83       	std	Y+2, r22	; 0x02
    220e:	5c 83       	std	Y+4, r21	; 0x04
    2210:	4b 83       	std	Y+3, r20	; 0x03
	LCD_goToRowColumn(row,col); /* go to to the required LCD position */
    2212:	89 81       	ldd	r24, Y+1	; 0x01
    2214:	6a 81       	ldd	r22, Y+2	; 0x02
    2216:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_goToRowColumn>
	LCD_displayString(Str); /* display the string */
    221a:	8b 81       	ldd	r24, Y+3	; 0x03
    221c:	9c 81       	ldd	r25, Y+4	; 0x04
    221e:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
}
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	0f 90       	pop	r0
    222a:	cf 91       	pop	r28
    222c:	df 91       	pop	r29
    222e:	08 95       	ret

00002230 <LCD_intgerToString>:

void LCD_intgerToString(int data)
{
    2230:	df 93       	push	r29
    2232:	cf 93       	push	r28
    2234:	cd b7       	in	r28, 0x3d	; 61
    2236:	de b7       	in	r29, 0x3e	; 62
    2238:	62 97       	sbiw	r28, 0x12	; 18
    223a:	0f b6       	in	r0, 0x3f	; 63
    223c:	f8 94       	cli
    223e:	de bf       	out	0x3e, r29	; 62
    2240:	0f be       	out	0x3f, r0	; 63
    2242:	cd bf       	out	0x3d, r28	; 61
    2244:	9a 8b       	std	Y+18, r25	; 0x12
    2246:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* 10 for decimal */
    2248:	89 89       	ldd	r24, Y+17	; 0x11
    224a:	9a 89       	ldd	r25, Y+18	; 0x12
    224c:	9e 01       	movw	r18, r28
    224e:	2f 5f       	subi	r18, 0xFF	; 255
    2250:	3f 4f       	sbci	r19, 0xFF	; 255
    2252:	b9 01       	movw	r22, r18
    2254:	4a e0       	ldi	r20, 0x0A	; 10
    2256:	50 e0       	ldi	r21, 0x00	; 0
    2258:	0e 94 43 13 	call	0x2686	; 0x2686 <itoa>
   LCD_displayString(buff);
    225c:	ce 01       	movw	r24, r28
    225e:	01 96       	adiw	r24, 0x01	; 1
    2260:	0e 94 94 10 	call	0x2128	; 0x2128 <LCD_displayString>
}
    2264:	62 96       	adiw	r28, 0x12	; 18
    2266:	0f b6       	in	r0, 0x3f	; 63
    2268:	f8 94       	cli
    226a:	de bf       	out	0x3e, r29	; 62
    226c:	0f be       	out	0x3f, r0	; 63
    226e:	cd bf       	out	0x3d, r28	; 61
    2270:	cf 91       	pop	r28
    2272:	df 91       	pop	r29
    2274:	08 95       	ret

00002276 <LCD_clearScreen>:

void LCD_clearScreen(void)
{
    2276:	df 93       	push	r29
    2278:	cf 93       	push	r28
    227a:	cd b7       	in	r28, 0x3d	; 61
    227c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_COMMAND); //clear display 
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	0e 94 9c 0c 	call	0x1938	; 0x1938 <LCD_sendCommand>
}
    2284:	cf 91       	pop	r28
    2286:	df 91       	pop	r29
    2288:	08 95       	ret

0000228a <__vector_9>:

/*************************************************************************
 *                       Interrupt Service Routines                      *
 *************************************************************************/
ISR(TIMER0_OVF_vect)
{
    228a:	1f 92       	push	r1
    228c:	0f 92       	push	r0
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	0f 92       	push	r0
    2292:	11 24       	eor	r1, r1
    2294:	2f 93       	push	r18
    2296:	3f 93       	push	r19
    2298:	4f 93       	push	r20
    229a:	5f 93       	push	r21
    229c:	6f 93       	push	r22
    229e:	7f 93       	push	r23
    22a0:	8f 93       	push	r24
    22a2:	9f 93       	push	r25
    22a4:	af 93       	push	r26
    22a6:	bf 93       	push	r27
    22a8:	ef 93       	push	r30
    22aa:	ff 93       	push	r31
    22ac:	df 93       	push	r29
    22ae:	cf 93       	push	r28
    22b0:	cd b7       	in	r28, 0x3d	; 61
    22b2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    22b4:	80 91 35 01 	lds	r24, 0x0135
    22b8:	90 91 36 01 	lds	r25, 0x0136
    22bc:	00 97       	sbiw	r24, 0x00	; 0
    22be:	29 f0       	breq	.+10     	; 0x22ca <__vector_9+0x40>
	{
		(*g_callBackPtr)();
    22c0:	e0 91 35 01 	lds	r30, 0x0135
    22c4:	f0 91 36 01 	lds	r31, 0x0136
    22c8:	09 95       	icall
	}
}
    22ca:	cf 91       	pop	r28
    22cc:	df 91       	pop	r29
    22ce:	ff 91       	pop	r31
    22d0:	ef 91       	pop	r30
    22d2:	bf 91       	pop	r27
    22d4:	af 91       	pop	r26
    22d6:	9f 91       	pop	r25
    22d8:	8f 91       	pop	r24
    22da:	7f 91       	pop	r23
    22dc:	6f 91       	pop	r22
    22de:	5f 91       	pop	r21
    22e0:	4f 91       	pop	r20
    22e2:	3f 91       	pop	r19
    22e4:	2f 91       	pop	r18
    22e6:	0f 90       	pop	r0
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	0f 90       	pop	r0
    22ec:	1f 90       	pop	r1
    22ee:	18 95       	reti

000022f0 <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    22f0:	1f 92       	push	r1
    22f2:	0f 92       	push	r0
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	0f 92       	push	r0
    22f8:	11 24       	eor	r1, r1
    22fa:	2f 93       	push	r18
    22fc:	3f 93       	push	r19
    22fe:	4f 93       	push	r20
    2300:	5f 93       	push	r21
    2302:	6f 93       	push	r22
    2304:	7f 93       	push	r23
    2306:	8f 93       	push	r24
    2308:	9f 93       	push	r25
    230a:	af 93       	push	r26
    230c:	bf 93       	push	r27
    230e:	ef 93       	push	r30
    2310:	ff 93       	push	r31
    2312:	df 93       	push	r29
    2314:	cf 93       	push	r28
    2316:	cd b7       	in	r28, 0x3d	; 61
    2318:	de b7       	in	r29, 0x3e	; 62
	TCNT0 = g_initialCounter;
    231a:	e2 e5       	ldi	r30, 0x52	; 82
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 91 33 01 	lds	r24, 0x0133
    2322:	80 83       	st	Z, r24
	if(g_callBackPtr != NULL_PTR)
    2324:	80 91 35 01 	lds	r24, 0x0135
    2328:	90 91 36 01 	lds	r25, 0x0136
    232c:	00 97       	sbiw	r24, 0x00	; 0
    232e:	29 f0       	breq	.+10     	; 0x233a <__vector_19+0x4a>
	{
		(*g_callBackPtr)();
    2330:	e0 91 35 01 	lds	r30, 0x0135
    2334:	f0 91 36 01 	lds	r31, 0x0136
    2338:	09 95       	icall
	}
}
    233a:	cf 91       	pop	r28
    233c:	df 91       	pop	r29
    233e:	ff 91       	pop	r31
    2340:	ef 91       	pop	r30
    2342:	bf 91       	pop	r27
    2344:	af 91       	pop	r26
    2346:	9f 91       	pop	r25
    2348:	8f 91       	pop	r24
    234a:	7f 91       	pop	r23
    234c:	6f 91       	pop	r22
    234e:	5f 91       	pop	r21
    2350:	4f 91       	pop	r20
    2352:	3f 91       	pop	r19
    2354:	2f 91       	pop	r18
    2356:	0f 90       	pop	r0
    2358:	0f be       	out	0x3f, r0	; 63
    235a:	0f 90       	pop	r0
    235c:	1f 90       	pop	r1
    235e:	18 95       	reti

00002360 <Timer0_init>:
/*************************************************************************
 *                           Function Definition                         *
 *************************************************************************/

void Timer0_init(const Timer0_ConfigType * Config_Ptr)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	00 d0       	rcall	.+0      	; 0x2366 <Timer0_init+0x6>
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_Ptr->ctc_inital_value;
    236e:	a2 e5       	ldi	r26, 0x52	; 82
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e9 81       	ldd	r30, Y+1	; 0x01
    2374:	fa 81       	ldd	r31, Y+2	; 0x02
    2376:	84 81       	ldd	r24, Z+4	; 0x04
    2378:	8c 93       	st	X, r24
	SET_BIT(TCCR0,FOC0);
	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->clock);  //TCCR0 = (TCCR0 & 0xF8) | ((Config_Ptr->clock) & 0x07);
	TCCR0 = (TCCR0 & 0xCF) | ((Config_Ptr->ctc_mode) << COM00);
	TCCR0 =(((Config_Ptr->mode) & 0x01) << WGM00) | (((Config_Ptr->mode) & 0x02) << WGM01);
	*/
	TCCR0 |= (1<<FOC0) | (Config_Ptr->clock) | ((Config_Ptr->ctc_mode) << COM00) | ((Config_Ptr->mode) << WGM01);
    237a:	a3 e5       	ldi	r26, 0x53	; 83
    237c:	b0 e0       	ldi	r27, 0x00	; 0
    237e:	e3 e5       	ldi	r30, 0x53	; 83
    2380:	f0 e0       	ldi	r31, 0x00	; 0
    2382:	80 81       	ld	r24, Z
    2384:	38 2f       	mov	r19, r24
    2386:	e9 81       	ldd	r30, Y+1	; 0x01
    2388:	fa 81       	ldd	r31, Y+2	; 0x02
    238a:	82 81       	ldd	r24, Z+2	; 0x02
    238c:	80 68       	ori	r24, 0x80	; 128
    238e:	28 2f       	mov	r18, r24
    2390:	e9 81       	ldd	r30, Y+1	; 0x01
    2392:	fa 81       	ldd	r31, Y+2	; 0x02
    2394:	81 81       	ldd	r24, Z+1	; 0x01
    2396:	88 2f       	mov	r24, r24
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	82 95       	swap	r24
    239c:	92 95       	swap	r25
    239e:	90 7f       	andi	r25, 0xF0	; 240
    23a0:	98 27       	eor	r25, r24
    23a2:	80 7f       	andi	r24, 0xF0	; 240
    23a4:	98 27       	eor	r25, r24
    23a6:	28 2b       	or	r18, r24
    23a8:	e9 81       	ldd	r30, Y+1	; 0x01
    23aa:	fa 81       	ldd	r31, Y+2	; 0x02
    23ac:	80 81       	ld	r24, Z
    23ae:	88 2f       	mov	r24, r24
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	88 0f       	add	r24, r24
    23b8:	99 1f       	adc	r25, r25
    23ba:	88 0f       	add	r24, r24
    23bc:	99 1f       	adc	r25, r25
    23be:	82 2b       	or	r24, r18
    23c0:	83 2b       	or	r24, r19
    23c2:	8c 93       	st	X, r24
	if(Config_Ptr->enable_interrupt == OVERFLOW)
    23c4:	e9 81       	ldd	r30, Y+1	; 0x01
    23c6:	fa 81       	ldd	r31, Y+2	; 0x02
    23c8:	83 81       	ldd	r24, Z+3	; 0x03
    23ca:	88 23       	and	r24, r24
    23cc:	41 f4       	brne	.+16     	; 0x23de <Timer0_init+0x7e>
	{
		TIMSK |= (1<<TOIE0);
    23ce:	a9 e5       	ldi	r26, 0x59	; 89
    23d0:	b0 e0       	ldi	r27, 0x00	; 0
    23d2:	e9 e5       	ldi	r30, 0x59	; 89
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	81 60       	ori	r24, 0x01	; 1
    23da:	8c 93       	st	X, r24
    23dc:	12 c0       	rjmp	.+36     	; 0x2402 <Timer0_init+0xa2>
	}
	else if(Config_Ptr->enable_interrupt == CTC)
    23de:	e9 81       	ldd	r30, Y+1	; 0x01
    23e0:	fa 81       	ldd	r31, Y+2	; 0x02
    23e2:	83 81       	ldd	r24, Z+3	; 0x03
    23e4:	82 30       	cpi	r24, 0x02	; 2
    23e6:	69 f4       	brne	.+26     	; 0x2402 <Timer0_init+0xa2>
	{
		TIMSK |= (1<<OCIE0);
    23e8:	a9 e5       	ldi	r26, 0x59	; 89
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	e9 e5       	ldi	r30, 0x59	; 89
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	82 60       	ori	r24, 0x02	; 2
    23f4:	8c 93       	st	X, r24
		OCR0 = Config_Ptr->ctc_final_value;
    23f6:	ac e5       	ldi	r26, 0x5C	; 92
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e9 81       	ldd	r30, Y+1	; 0x01
    23fc:	fa 81       	ldd	r31, Y+2	; 0x02
    23fe:	85 81       	ldd	r24, Z+5	; 0x05
    2400:	8c 93       	st	X, r24
	}


}
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <Timer0_setCallBack>:

void Timer0_setCallBack(void(*a_ptr)(void))
{
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	00 d0       	rcall	.+0      	; 0x2412 <Timer0_setCallBack+0x6>
    2412:	cd b7       	in	r28, 0x3d	; 61
    2414:	de b7       	in	r29, 0x3e	; 62
    2416:	9a 83       	std	Y+2, r25	; 0x02
    2418:	89 83       	std	Y+1, r24	; 0x01
	g_callBackPtr = a_ptr;
    241a:	89 81       	ldd	r24, Y+1	; 0x01
    241c:	9a 81       	ldd	r25, Y+2	; 0x02
    241e:	90 93 36 01 	sts	0x0136, r25
    2422:	80 93 35 01 	sts	0x0135, r24
}
    2426:	0f 90       	pop	r0
    2428:	0f 90       	pop	r0
    242a:	cf 91       	pop	r28
    242c:	df 91       	pop	r29
    242e:	08 95       	ret

00002430 <UART_init>:

/***********************************************************************
 *                      Function Definitions                           *
 ***********************************************************************/
void UART_init(const Uart_ConfigType * Config_Ptr)
{
    2430:	df 93       	push	r29
    2432:	cf 93       	push	r28
    2434:	00 d0       	rcall	.+0      	; 0x2436 <UART_init+0x6>
    2436:	cd b7       	in	r28, 0x3d	; 61
    2438:	de b7       	in	r29, 0x3e	; 62
    243a:	9a 83       	std	Y+2, r25	; 0x02
    243c:	89 83       	std	Y+1, r24	; 0x01
	UCSRA = (1<<U2X);
    243e:	eb e2       	ldi	r30, 0x2B	; 43
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	82 e0       	ldi	r24, 0x02	; 2
    2444:	80 83       	st	Z, r24
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2446:	ea e2       	ldi	r30, 0x2A	; 42
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	88 e1       	ldi	r24, 0x18	; 24
    244c:	80 83       	st	Z, r24


	SET_BIT(UCSRC,URSEL);
    244e:	a0 e4       	ldi	r26, 0x40	; 64
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e0 e4       	ldi	r30, 0x40	; 64
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	80 68       	ori	r24, 0x80	; 128
    245a:	8c 93       	st	X, r24
	//CLEAR_BIT(UCSRC,UCPOL);
	UCSRC |= ((Config_Ptr->char_size)<<UCSZ0) | ((Config_Ptr->stop_bit)<<USBS) | ((Config_Ptr->partiy_mode)<<UPM0) | ((Config_Ptr->mode)<<UMSEL);
    245c:	a0 e4       	ldi	r26, 0x40	; 64
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e0 e4       	ldi	r30, 0x40	; 64
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	38 2f       	mov	r19, r24
    2468:	e9 81       	ldd	r30, Y+1	; 0x01
    246a:	fa 81       	ldd	r31, Y+2	; 0x02
    246c:	83 81       	ldd	r24, Z+3	; 0x03
    246e:	88 2f       	mov	r24, r24
    2470:	90 e0       	ldi	r25, 0x00	; 0
    2472:	88 0f       	add	r24, r24
    2474:	99 1f       	adc	r25, r25
    2476:	28 2f       	mov	r18, r24
    2478:	e9 81       	ldd	r30, Y+1	; 0x01
    247a:	fa 81       	ldd	r31, Y+2	; 0x02
    247c:	82 81       	ldd	r24, Z+2	; 0x02
    247e:	88 2f       	mov	r24, r24
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	88 0f       	add	r24, r24
    2484:	99 1f       	adc	r25, r25
    2486:	88 0f       	add	r24, r24
    2488:	99 1f       	adc	r25, r25
    248a:	88 0f       	add	r24, r24
    248c:	99 1f       	adc	r25, r25
    248e:	28 2b       	or	r18, r24
    2490:	e9 81       	ldd	r30, Y+1	; 0x01
    2492:	fa 81       	ldd	r31, Y+2	; 0x02
    2494:	81 81       	ldd	r24, Z+1	; 0x01
    2496:	88 2f       	mov	r24, r24
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	82 95       	swap	r24
    249c:	92 95       	swap	r25
    249e:	90 7f       	andi	r25, 0xF0	; 240
    24a0:	98 27       	eor	r25, r24
    24a2:	80 7f       	andi	r24, 0xF0	; 240
    24a4:	98 27       	eor	r25, r24
    24a6:	28 2b       	or	r18, r24
    24a8:	e9 81       	ldd	r30, Y+1	; 0x01
    24aa:	fa 81       	ldd	r31, Y+2	; 0x02
    24ac:	80 81       	ld	r24, Z
    24ae:	88 2f       	mov	r24, r24
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	00 24       	eor	r0, r0
    24b4:	96 95       	lsr	r25
    24b6:	87 95       	ror	r24
    24b8:	07 94       	ror	r0
    24ba:	96 95       	lsr	r25
    24bc:	87 95       	ror	r24
    24be:	07 94       	ror	r0
    24c0:	98 2f       	mov	r25, r24
    24c2:	80 2d       	mov	r24, r0
    24c4:	82 2b       	or	r24, r18
    24c6:	83 2b       	or	r24, r19
    24c8:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF4) | ((Config_Ptr->stop_bit)<<USBS);
	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->partiy_mode)<<UPM0);
	UCSRC = (UCSRC & 0xBF) | ((Config_Ptr->mode)<<UMSEL);

 */
	UBRRH = BAUD_PRESCALE>>8;
    24ca:	e0 e4       	ldi	r30, 0x40	; 64
    24cc:	f0 e0       	ldi	r31, 0x00	; 0
    24ce:	10 82       	st	Z, r1
	UBRRL = BAUD_PRESCALE;
    24d0:	e9 e2       	ldi	r30, 0x29	; 41
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	8c e0       	ldi	r24, 0x0C	; 12
    24d6:	80 83       	st	Z, r24

}
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	cf 91       	pop	r28
    24de:	df 91       	pop	r29
    24e0:	08 95       	ret

000024e2 <UART_sendByte>:

void UART_sendByte(const uint8 data)
{
    24e2:	df 93       	push	r29
    24e4:	cf 93       	push	r28
    24e6:	0f 92       	push	r0
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	89 83       	std	Y+1, r24	; 0x01
	while(BIT_IS_CLEAR(UCSRA,UDRE));
    24ee:	eb e2       	ldi	r30, 0x2B	; 43
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	80 81       	ld	r24, Z
    24f4:	88 2f       	mov	r24, r24
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	80 72       	andi	r24, 0x20	; 32
    24fa:	90 70       	andi	r25, 0x00	; 0
    24fc:	00 97       	sbiw	r24, 0x00	; 0
    24fe:	b9 f3       	breq	.-18     	; 0x24ee <UART_sendByte+0xc>
	UDR = data;
    2500:	ec e2       	ldi	r30, 0x2C	; 44
    2502:	f0 e0       	ldi	r31, 0x00	; 0
    2504:	89 81       	ldd	r24, Y+1	; 0x01
    2506:	80 83       	st	Z, r24
}
    2508:	0f 90       	pop	r0
    250a:	cf 91       	pop	r28
    250c:	df 91       	pop	r29
    250e:	08 95       	ret

00002510 <UART_recieveByte>:

uint8 UART_recieveByte(void)
{
    2510:	df 93       	push	r29
    2512:	cf 93       	push	r28
    2514:	cd b7       	in	r28, 0x3d	; 61
    2516:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UCSRA,RXC));
    2518:	eb e2       	ldi	r30, 0x2B	; 43
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	88 23       	and	r24, r24
    2520:	dc f7       	brge	.-10     	; 0x2518 <UART_recieveByte+0x8>
	return UDR;
    2522:	ec e2       	ldi	r30, 0x2C	; 44
    2524:	f0 e0       	ldi	r31, 0x00	; 0
    2526:	80 81       	ld	r24, Z
}
    2528:	cf 91       	pop	r28
    252a:	df 91       	pop	r29
    252c:	08 95       	ret

0000252e <UART_sendString>:

void UART_sendString(const uint8 *Str)
{
    252e:	df 93       	push	r29
    2530:	cf 93       	push	r28
    2532:	00 d0       	rcall	.+0      	; 0x2534 <UART_sendString+0x6>
    2534:	0f 92       	push	r0
    2536:	cd b7       	in	r28, 0x3d	; 61
    2538:	de b7       	in	r29, 0x3e	; 62
    253a:	9b 83       	std	Y+3, r25	; 0x03
    253c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    253e:	19 82       	std	Y+1, r1	; 0x01
    2540:	0e c0       	rjmp	.+28     	; 0x255e <UART_sendString+0x30>
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2542:	89 81       	ldd	r24, Y+1	; 0x01
    2544:	28 2f       	mov	r18, r24
    2546:	30 e0       	ldi	r19, 0x00	; 0
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	9b 81       	ldd	r25, Y+3	; 0x03
    254c:	fc 01       	movw	r30, r24
    254e:	e2 0f       	add	r30, r18
    2550:	f3 1f       	adc	r31, r19
    2552:	80 81       	ld	r24, Z
    2554:	0e 94 71 12 	call	0x24e2	; 0x24e2 <UART_sendByte>
		i++;
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	8f 5f       	subi	r24, 0xFF	; 255
    255c:	89 83       	std	Y+1, r24	; 0x01
}

void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    255e:	89 81       	ldd	r24, Y+1	; 0x01
    2560:	28 2f       	mov	r18, r24
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	8a 81       	ldd	r24, Y+2	; 0x02
    2566:	9b 81       	ldd	r25, Y+3	; 0x03
    2568:	fc 01       	movw	r30, r24
    256a:	e2 0f       	add	r30, r18
    256c:	f3 1f       	adc	r31, r19
    256e:	80 81       	ld	r24, Z
    2570:	88 23       	and	r24, r24
    2572:	39 f7       	brne	.-50     	; 0x2542 <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}
}
    2574:	0f 90       	pop	r0
    2576:	0f 90       	pop	r0
    2578:	0f 90       	pop	r0
    257a:	cf 91       	pop	r28
    257c:	df 91       	pop	r29
    257e:	08 95       	ret

00002580 <UART_receiveString>:

void UART_receiveString(uint8 *Str)
{
    2580:	0f 93       	push	r16
    2582:	1f 93       	push	r17
    2584:	df 93       	push	r29
    2586:	cf 93       	push	r28
    2588:	00 d0       	rcall	.+0      	; 0x258a <UART_receiveString+0xa>
    258a:	0f 92       	push	r0
    258c:	cd b7       	in	r28, 0x3d	; 61
    258e:	de b7       	in	r29, 0x3e	; 62
    2590:	9b 83       	std	Y+3, r25	; 0x03
    2592:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2594:	19 82       	std	Y+1, r1	; 0x01
	Str[i] = UART_recieveByte();
    2596:	89 81       	ldd	r24, Y+1	; 0x01
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	8a 81       	ldd	r24, Y+2	; 0x02
    259e:	9b 81       	ldd	r25, Y+3	; 0x03
    25a0:	8c 01       	movw	r16, r24
    25a2:	02 0f       	add	r16, r18
    25a4:	13 1f       	adc	r17, r19
    25a6:	0e 94 88 12 	call	0x2510	; 0x2510 <UART_recieveByte>
    25aa:	f8 01       	movw	r30, r16
    25ac:	80 83       	st	Z, r24
    25ae:	0f c0       	rjmp	.+30     	; 0x25ce <UART_receiveString+0x4e>
	while(Str[i] != '#')
	{
		i++;
    25b0:	89 81       	ldd	r24, Y+1	; 0x01
    25b2:	8f 5f       	subi	r24, 0xFF	; 255
    25b4:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    25b6:	89 81       	ldd	r24, Y+1	; 0x01
    25b8:	28 2f       	mov	r18, r24
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	9b 81       	ldd	r25, Y+3	; 0x03
    25c0:	8c 01       	movw	r16, r24
    25c2:	02 0f       	add	r16, r18
    25c4:	13 1f       	adc	r17, r19
    25c6:	0e 94 88 12 	call	0x2510	; 0x2510 <UART_recieveByte>
    25ca:	f8 01       	movw	r30, r16
    25cc:	80 83       	st	Z, r24

void UART_receiveString(uint8 *Str)
{
	uint8 i = 0;
	Str[i] = UART_recieveByte();
	while(Str[i] != '#')
    25ce:	89 81       	ldd	r24, Y+1	; 0x01
    25d0:	28 2f       	mov	r18, r24
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	8a 81       	ldd	r24, Y+2	; 0x02
    25d6:	9b 81       	ldd	r25, Y+3	; 0x03
    25d8:	fc 01       	movw	r30, r24
    25da:	e2 0f       	add	r30, r18
    25dc:	f3 1f       	adc	r31, r19
    25de:	80 81       	ld	r24, Z
    25e0:	83 32       	cpi	r24, 0x23	; 35
    25e2:	31 f7       	brne	.-52     	; 0x25b0 <UART_receiveString+0x30>
	{
		i++;
		Str[i] = UART_recieveByte();
	}
	Str[i] = '\0';
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	28 2f       	mov	r18, r24
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	8a 81       	ldd	r24, Y+2	; 0x02
    25ec:	9b 81       	ldd	r25, Y+3	; 0x03
    25ee:	fc 01       	movw	r30, r24
    25f0:	e2 0f       	add	r30, r18
    25f2:	f3 1f       	adc	r31, r19
    25f4:	10 82       	st	Z, r1
}
    25f6:	0f 90       	pop	r0
    25f8:	0f 90       	pop	r0
    25fa:	0f 90       	pop	r0
    25fc:	cf 91       	pop	r28
    25fe:	df 91       	pop	r29
    2600:	1f 91       	pop	r17
    2602:	0f 91       	pop	r16
    2604:	08 95       	ret

00002606 <__prologue_saves__>:
    2606:	2f 92       	push	r2
    2608:	3f 92       	push	r3
    260a:	4f 92       	push	r4
    260c:	5f 92       	push	r5
    260e:	6f 92       	push	r6
    2610:	7f 92       	push	r7
    2612:	8f 92       	push	r8
    2614:	9f 92       	push	r9
    2616:	af 92       	push	r10
    2618:	bf 92       	push	r11
    261a:	cf 92       	push	r12
    261c:	df 92       	push	r13
    261e:	ef 92       	push	r14
    2620:	ff 92       	push	r15
    2622:	0f 93       	push	r16
    2624:	1f 93       	push	r17
    2626:	cf 93       	push	r28
    2628:	df 93       	push	r29
    262a:	cd b7       	in	r28, 0x3d	; 61
    262c:	de b7       	in	r29, 0x3e	; 62
    262e:	ca 1b       	sub	r28, r26
    2630:	db 0b       	sbc	r29, r27
    2632:	0f b6       	in	r0, 0x3f	; 63
    2634:	f8 94       	cli
    2636:	de bf       	out	0x3e, r29	; 62
    2638:	0f be       	out	0x3f, r0	; 63
    263a:	cd bf       	out	0x3d, r28	; 61
    263c:	09 94       	ijmp

0000263e <__epilogue_restores__>:
    263e:	2a 88       	ldd	r2, Y+18	; 0x12
    2640:	39 88       	ldd	r3, Y+17	; 0x11
    2642:	48 88       	ldd	r4, Y+16	; 0x10
    2644:	5f 84       	ldd	r5, Y+15	; 0x0f
    2646:	6e 84       	ldd	r6, Y+14	; 0x0e
    2648:	7d 84       	ldd	r7, Y+13	; 0x0d
    264a:	8c 84       	ldd	r8, Y+12	; 0x0c
    264c:	9b 84       	ldd	r9, Y+11	; 0x0b
    264e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2650:	b9 84       	ldd	r11, Y+9	; 0x09
    2652:	c8 84       	ldd	r12, Y+8	; 0x08
    2654:	df 80       	ldd	r13, Y+7	; 0x07
    2656:	ee 80       	ldd	r14, Y+6	; 0x06
    2658:	fd 80       	ldd	r15, Y+5	; 0x05
    265a:	0c 81       	ldd	r16, Y+4	; 0x04
    265c:	1b 81       	ldd	r17, Y+3	; 0x03
    265e:	aa 81       	ldd	r26, Y+2	; 0x02
    2660:	b9 81       	ldd	r27, Y+1	; 0x01
    2662:	ce 0f       	add	r28, r30
    2664:	d1 1d       	adc	r29, r1
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
    2670:	ed 01       	movw	r28, r26
    2672:	08 95       	ret

00002674 <strcmp>:
    2674:	fb 01       	movw	r30, r22
    2676:	dc 01       	movw	r26, r24
    2678:	8d 91       	ld	r24, X+
    267a:	01 90       	ld	r0, Z+
    267c:	80 19       	sub	r24, r0
    267e:	01 10       	cpse	r0, r1
    2680:	d9 f3       	breq	.-10     	; 0x2678 <strcmp+0x4>
    2682:	99 0b       	sbc	r25, r25
    2684:	08 95       	ret

00002686 <itoa>:
    2686:	fb 01       	movw	r30, r22
    2688:	9f 01       	movw	r18, r30
    268a:	e8 94       	clt
    268c:	42 30       	cpi	r20, 0x02	; 2
    268e:	c4 f0       	brlt	.+48     	; 0x26c0 <itoa+0x3a>
    2690:	45 32       	cpi	r20, 0x25	; 37
    2692:	b4 f4       	brge	.+44     	; 0x26c0 <itoa+0x3a>
    2694:	4a 30       	cpi	r20, 0x0A	; 10
    2696:	29 f4       	brne	.+10     	; 0x26a2 <itoa+0x1c>
    2698:	97 fb       	bst	r25, 7
    269a:	1e f4       	brtc	.+6      	; 0x26a2 <itoa+0x1c>
    269c:	90 95       	com	r25
    269e:	81 95       	neg	r24
    26a0:	9f 4f       	sbci	r25, 0xFF	; 255
    26a2:	64 2f       	mov	r22, r20
    26a4:	77 27       	eor	r23, r23
    26a6:	0e 94 74 13 	call	0x26e8	; 0x26e8 <__udivmodhi4>
    26aa:	80 5d       	subi	r24, 0xD0	; 208
    26ac:	8a 33       	cpi	r24, 0x3A	; 58
    26ae:	0c f0       	brlt	.+2      	; 0x26b2 <itoa+0x2c>
    26b0:	89 5d       	subi	r24, 0xD9	; 217
    26b2:	81 93       	st	Z+, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	00 97       	sbiw	r24, 0x00	; 0
    26b8:	a1 f7       	brne	.-24     	; 0x26a2 <itoa+0x1c>
    26ba:	16 f4       	brtc	.+4      	; 0x26c0 <itoa+0x3a>
    26bc:	5d e2       	ldi	r21, 0x2D	; 45
    26be:	51 93       	st	Z+, r21
    26c0:	10 82       	st	Z, r1
    26c2:	c9 01       	movw	r24, r18
    26c4:	0c 94 64 13 	jmp	0x26c8	; 0x26c8 <strrev>

000026c8 <strrev>:
    26c8:	dc 01       	movw	r26, r24
    26ca:	fc 01       	movw	r30, r24
    26cc:	67 2f       	mov	r22, r23
    26ce:	71 91       	ld	r23, Z+
    26d0:	77 23       	and	r23, r23
    26d2:	e1 f7       	brne	.-8      	; 0x26cc <strrev+0x4>
    26d4:	32 97       	sbiw	r30, 0x02	; 2
    26d6:	04 c0       	rjmp	.+8      	; 0x26e0 <strrev+0x18>
    26d8:	7c 91       	ld	r23, X
    26da:	6d 93       	st	X+, r22
    26dc:	70 83       	st	Z, r23
    26de:	62 91       	ld	r22, -Z
    26e0:	ae 17       	cp	r26, r30
    26e2:	bf 07       	cpc	r27, r31
    26e4:	c8 f3       	brcs	.-14     	; 0x26d8 <strrev+0x10>
    26e6:	08 95       	ret

000026e8 <__udivmodhi4>:
    26e8:	aa 1b       	sub	r26, r26
    26ea:	bb 1b       	sub	r27, r27
    26ec:	51 e1       	ldi	r21, 0x11	; 17
    26ee:	07 c0       	rjmp	.+14     	; 0x26fe <__udivmodhi4_ep>

000026f0 <__udivmodhi4_loop>:
    26f0:	aa 1f       	adc	r26, r26
    26f2:	bb 1f       	adc	r27, r27
    26f4:	a6 17       	cp	r26, r22
    26f6:	b7 07       	cpc	r27, r23
    26f8:	10 f0       	brcs	.+4      	; 0x26fe <__udivmodhi4_ep>
    26fa:	a6 1b       	sub	r26, r22
    26fc:	b7 0b       	sbc	r27, r23

000026fe <__udivmodhi4_ep>:
    26fe:	88 1f       	adc	r24, r24
    2700:	99 1f       	adc	r25, r25
    2702:	5a 95       	dec	r21
    2704:	a9 f7       	brne	.-22     	; 0x26f0 <__udivmodhi4_loop>
    2706:	80 95       	com	r24
    2708:	90 95       	com	r25
    270a:	bc 01       	movw	r22, r24
    270c:	cd 01       	movw	r24, r26
    270e:	08 95       	ret

00002710 <_exit>:
    2710:	f8 94       	cli

00002712 <__stop_program>:
    2712:	ff cf       	rjmp	.-2      	; 0x2712 <__stop_program>
